{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/sundry-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/SUNDRY'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nZLIB                      = require 'zlib'\n{ width_of\n  to_width }              = require 'to-width'\njr                        = JSON.stringify\njp                        = JSON.parse\nHYPH                      = require 'intertext/lib/hyphenation'\nSQL                       = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_sundry = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$sundry_initialize: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_text: ( cfg ) ->\n    @types.validate.dbr_prepare_text_cfg ( cfg = { @constructor.C.defaults.dbr_prepare_text_cfg..., cfg..., } )\n    { text: R\n      entities\n      ncrs\n      hyphenate\n      newlines\n      uax14\n      trim\n      chomp       } = cfg\n    R               = @_decode_entities R, ncrs               if entities\n    R               = @_hyphenate R                           if hyphenate\n    R               = R.replace /\\n+/g, '\\x20'                if newlines\n    R               = @_uax14 R                               if uax14\n    R               = R.replace /^\\n+$/, ''                   if chomp\n    R               = R.replace /^\\x20*(.*?)\\x20*$/, '$1'     if trim\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  decode_entities: ( cfg ) ->\n    ### ###\n    @types.validate.dbr_decode_entities_cfg ( cfg = { @constructor.C.defaults.dbr_decode_entities_cfg..., cfg..., } )\n    return @_decode_entities cfg.text, cfg.ncrs\n\n  #---------------------------------------------------------------------------------------------------------\n  _decode_entities: ( text, ncrs ) ->\n    R               = text\n    if ncrs then  R = @RBW.decode_ncrs R\n    else          R = R.replace /&shy;/g, @constructor.C.special_chrs.shy\n    return R.replace /&wbr;/g, @constructor.C.special_chrs.wbr\n\n  #---------------------------------------------------------------------------------------------------------\n  _uax14: ( text ) ->\n    text_bfr  = Buffer.from text\n    bris      = JSON.parse @RBW.find_line_break_positions text\n    parts     = ( ( text_bfr[ bri ... bris[ idx + 1 ] ? Infinity ].toString 'utf-8' ) for bri, idx in bris )\n    R         = parts.join @constructor.C.special_chrs.wbr\n    ### remove WBR after SHY, SPC? ###\n    ### TAINT precompile patterns, always use constants instead of literals ###\n    R         = R.replace /\\xad\\u200b/g, @constructor.C.special_chrs.shy\n    R         = R.replace /\\x20\\u200b/g, '\\x20'\n    R         = R.replace /\\u200b{2,}/g, @constructor.C.special_chrs.wbr\n    R         = R.replace /\\u200b$/g, ''\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _hyphenate: ( text ) -> HYPH.hyphenate text\n\n\n  #=========================================================================================================\n  # VISUALIZATION\n  #---------------------------------------------------------------------------------------------------------\n  render_ad_chain: ( cfg ) ->\n    @types.validate.dbr_render_ad_chain_cfg ( cfg = { @constructor.C.defaults.dbr_render_ad_chain_cfg..., cfg..., } )\n    #.......................................................................................................\n    { doc\n      par\n      b\n      context }     = cfg\n    { schema }      = @cfg\n    collector       = [ [], [], [], [], [], [], ]\n    # widths_sum      = 0\n    sgis            = new Set()\n    prv_sgi         = null\n    #.......................................................................................................\n    row = @db.first_row SQL\"\"\"\n      select\n          id\n        from #{schema}.ads\n        where true\n          and ( doc = $doc )\n          and ( par = $par )\n          and ( alt = 1 )\n          and ( b1 between $b - 10 and $b + 10 )\n        order by abs( b1 - $b ), id\n        limit 1;\"\"\", { doc, par, b, }\n    throw new E.Dbr_value_error '^Drb/sundry@1^', 'b', b, \"no suitable row in table #{schema}.ads\" unless row?\n    { id, } = row\n    #.......................................................................................................\n    for ad from @db SQL\"\"\"\n      select\n          *\n        from ads\n        where true\n          and ( alt = 1 )\n          and ( id between $id - $context and $id + $context )\n        order by b1;\"\"\", { id, context, }\n      { gid\n        chrs\n        sgi     } = ad\n      sgis.add sgi\n      b           = ad.b1.toString()\n      chrs        = ad.chrs\n      chrs        = chrs.replace '\\xad', '¬'\n      chrs        = chrs.replace '\\x20', '␣'\n      gid         = ad.gid.toString()\n      sgi_t       = if sgi is prv_sgi then '〃' else sgi.toString()\n      width       = Math.max 1, ( width_of b ), ( width_of chrs ), ( width_of gid ), ( width_of sgi_t )\n      # widths_sum += width\n      b           = to_width b,     width, { align: 'left',   }\n      chrs        = to_width chrs,  width, { align: 'right',  }\n      gid         = to_width gid,   width, { align: 'right',  }\n      sgi_t       = to_width sgi_t, width, { align: 'center', }\n      h           = '─'.repeat width\n      collector[ 0 ].push b + ' '\n      collector[ 1 ].push     '┬' + h\n      collector[ 2 ].push     '│' + chrs\n      collector[ 3 ].push     '│' + gid\n      collector[ 4 ].push     '┴' + h\n      collector[ 5 ].push     ' ' + sgi_t\n      prv_sgi     = sgi\n    collector[ 0 ].push ' '\n    collector[ 1 ].push '┬'\n    collector[ 2 ].push '│'\n    collector[ 3 ].push '│'\n    collector[ 4 ].push '┴'\n    collector[ 5 ].push ' '\n    #.......................................................................................................\n    debug '^77890^', sgis\n    #.......................................................................................................\n    return ( line.join '' for line in collector ).join '\\n'\n\n\n"
  ]
}