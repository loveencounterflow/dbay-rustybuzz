{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/OUTLINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nZLIB                      = require 'zlib'\n_TO_BE_REMOVED_bbox_pattern = /^<rect x=\"(?<x>[-+0-9]+)\" y=\"(?<y>[-+0-9]+)\" width=\"(?<width>[-+0-9]+)\" height=\"(?<height>[-+0-9]+)\"\\/>$/\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_outlines = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    guy.props.hide @, 'state', {} unless @state?\n    @state.prv_fontidx            = -1\n    @state.font_idx_by_fontnicks  = {}\n    #.........................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_font_path: ( font_path ) ->\n    return font_path if font_path.startsWith '/'\n    jzrfonts_path = '../../../assets/jizura-fonts'\n    return PATH.resolve PATH.join __dirname, jzrfonts_path, font_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_font_bytes: ( font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n  #---------------------------------------------------------------------------------------------------------\n  register_fontnick: ( cfg ) ->\n    @types.validate.dbr_register_fontnick_cfg ( cfg = { @constructor.C.defaults.dbr_register_fontnick_cfg..., cfg..., } )\n    @db @sql.upsert_fontnick, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _fspath_from_fontnick: ( fontnick ) ->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    return @db.single_value @sql.fspath_from_fontnick, { fontnick, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _font_idx_from_fontnick: ( fontnick )->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    unless ( R = @state.font_idx_by_fontnicks[ fontnick ] )?\n      throw new E.Dbr_unknown_or_unprepared_fontnick '^dbr/outlines@1^', fontnick\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_font: ( cfg ) ->\n    clasz = @constructor\n    unless @state.prv_fontidx < clasz.C.last_fontidx\n      throw new E.Dbr_font_capacity_exceeded '^dbr/outlines@1^', clasz.C.last_fontidx + 1\n    #.........................................................................................................\n    @types.validate.dbr_prepare_font_cfg ( cfg = { @constructor.C.defaults.dbr_prepare_font_cfg..., cfg..., } )\n    { fontnick\n      fspath  } = cfg\n    #.........................................................................................................\n    throw new E.Dbr_not_implemented '^dbr/outlines@1^', \"setting fspath\" if fspath?\n    return null if @state.font_idx_by_fontnicks[ fontnick ]?\n    #.........................................................................................................\n    fspath      = @_fspath_from_fontnick fontnick\n    font_idx    = ( @state.prv_fontidx += 1 )\n    font_bytes  = @_get_font_bytes fspath\n    @RBW.register_font font_idx, font_bytes\n    @state.font_idx_by_fontnicks[ fontnick ] = font_idx\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_single_outline: ( cfg ) ->\n    ### TAINT this method is highly inefficient for large numbers of outline retrievals; the intention is to\n    replace it with a function that allows for lists of `gid`s to be handled with a single call. ###\n    #.........................................................................................................\n    @types.validate.dbr_get_single_outline_cfg ( cfg = { @constructor.C.defaults.dbr_get_single_outline_cfg..., cfg..., } )\n    { fontnick\n      gid     } = cfg\n    font_idx    = @_font_idx_from_fontnick fontnick\n    #.........................................................................................................\n    { br, pd, } = JSON.parse @RBW.glyph_to_svg_pathdata font_idx, gid\n    #.........................................................................................................\n    ### TAINT we parse the bounding rectangle (which will look like `<rect x=\"49\" y=\"-613\" width=\"245\"\n    height=\"627\"/>`) so users of this method get (more or less) the format we mean to implement in the\n    future. ###\n    unless ( match = br.match _TO_BE_REMOVED_bbox_pattern )?\n      parameters = rpr { fontnick, gid, br, }\n      throw new E.Dbr_internal_error '^dbr/outlines@1^', \"found unknown format when trying to parse bounding box SVG #{parameters}\"\n    x           = parseInt match.groups.x,      10\n    y           = parseInt match.groups.y,      10\n    width       = parseInt match.groups.width,  10\n    height      = parseInt match.groups.height, 10\n    x1          = x + width\n    y1          = y + height\n    return { bbox: { x, y, x1, y1, width, height, }, pd, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_drb_chrs: ( chrs ) ->\n    chrs = ( chrs.flat Infinity ).join '' if @types.isa.list chrs\n    return ( ( chr.codePointAt 0 ) for chr in Array.from chrs )\n\n  #---------------------------------------------------------------------------------------------------------\n  get_cgid_map: ( cfg ) ->\n    ### Given a list of Unicode CIDs as `cids` and a `fontnick`, return a `Map` from CIDs to GIDs\n    (glyf IDs). Unmappable CIDs will be left out. ###\n    ### TAINT validate ###\n    @types.validate.dbr_get_cgid_map_cfg ( cfg = { @constructor.C.defaults.dbr_get_cgid_map_cfg..., cfg..., } )\n    { cids\n      chrs\n      fontnick }  = cfg\n    cids       ?= @_normalize_drb_chrs chrs\n    font_idx    = @_font_idx_from_fontnick fontnick\n    text        = ( ( ( String.fromCodePoint cid ) for cid in cids ).join '\\n' ) + '\\n'\n    gids        = @RBW.shape_text { format: 'short', text, font_idx, } # formats: json, rusty, short\n    gids        = gids.replace /\\|([0-9]+:)[^|]+\\|[^|]+/g, '$1'\n    gids        = gids[ ... gids.length - 2 ]\n    gids        = gids.split ':'\n    gids        = ( ( parseInt gid ) for gid in gids )\n    R           = new Map()\n    for cid, idx in cids\n      continue if ( gid = gids[ idx ] ) is 0\n      R.set cid, gid\n    return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  shape_text: ( cfg ) ->\n    @types.validate.dbr_shape_text_cfg ( cfg = { @constructor.C.defaults.dbr_shape_text_cfg..., cfg..., } )\n    { fontnick\n      text      } = cfg\n    font_idx      = @_font_idx_from_fontnick fontnick\n    arrangement   = JSON.parse @RBW.shape_text { format: 'json', text, font_idx, } # formats: json, rusty, short\n    return arrangement # ???????????????????????????????\n    # see get_cgid_map\n\n  #-----------------------------------------------------------------------------------------------------------\n  get_font_metrics: ( cfg ) ->\n    @types.validate.dbr_get_font_metrics_cfg ( cfg = { @constructor.C.defaults.dbr_get_font_metrics_cfg..., cfg..., } )\n    { fontnick }  = cfg\n    font_idx      = @_font_idx_from_fontnick fontnick\n    return JSON.parse @RBW.get_font_metrics font_idx\n\n  #-----------------------------------------------------------------------------------------------------------\n  _zip:                     ( txt ) -> ZLIB.deflateRawSync ( Buffer.from txt ), @constructor.C.zlib_zip_cfg\n  _unzip:                   ( bfr ) -> ( ZLIB.inflateRawSync bfr ).toString()\n  _prepare_insert_outline:          -> @db.prepare @sql.insert_outline\n\n  #-----------------------------------------------------------------------------------------------------------\n  insert_outlines: ( cfg ) =>\n    ### Given a `cfg.fontnick` and a (list or map of) `cfg.cgid_map`, insert the outlines and bounding\n    boxes of the referred glyfs. ###\n    ### TAINT validate ###\n    @types.validate.dbr_insert_outlines_cfg ( cfg = { @constructor.C.defaults.dbr_insert_outlines_cfg..., cfg..., } )\n    { fontnick\n      chrs\n      cids\n      cgid_map }        = cfg\n    cgid_map           ?= @get_cgid_map { fontnick, chrs, cids, }\n    insert_outline      = @_prepare_insert_outline()\n    @db =>\n      for [ cid, gid, ] from cgid_map\n        glyph       = String.fromCodePoint cid\n        { bbox\n          pd    }   = @get_single_outline { gid, fontnick, }\n        { x,  y,\n          x1, y1, } = bbox\n        pd_blob     = @_zip pd\n        insert_outline.run { fontnick, gid, cid, glyph, x, y, x1, y1, pd_blob, }\n      return null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nget_assigned_unicode_cids = ( cfg ) ->\n  throw new Error \"^3049385^ not implemented\" if cfg?\n  R = []\n  ranges = [\n    # excluded: 0x00, control characters, space\n    [ 0x00021, 0x0d800 ]\n    # excluded: high and low surrogates\n    [ 0x0e000, 0x0f8ff ]\n    # excluded: PUA\n    [ 0x0f900, 0x0fffd ]\n    # excluded: non-characters\n    [ 0x10000, 0x1fffd ] # SMP\n    # excluded: non-characters\n    [ 0x20000, 0x2fffd ] # SIP\n    # excluded: non-characters\n    [ 0x30000, 0x3fffd ] # TIP\n    # excluded: non-characters\n    ]\n  ### see https://unicode.org/reports/tr18/#General_Category_Property ###\n  ### see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes ###\n  pattern_A = /^(\\p{L}|\\p{M}|\\p{N}|\\p{S}|\\p{P})/u\n  pattern_B = /^\\P{Cn}$/u\n  R = []\n  for [ lo, hi, ] in ranges\n    for cid in [ lo .. hi ]\n      continue unless pattern_A.test String.fromCodePoint cid\n      # continue unless pattern_B.test String.fromCodePoint cid\n      R.push cid\n  return R\n# U+FFFE and U+FFFF on the BMP, U+1FFFE and U+1FFFF on Plane 1, and so on, up to U+10FFFE and U+10FFFF on\n# Plane 16, for a total of 34 code points. In addition, there is a contiguous range of another 32 noncharacter\n# code points in the BMP: U+FDD0..U+FDEF\n\n# D800–DBFF) and 1024 \"low\" surrogates (DC00–DFFF\n\n\n\n"
  ]
}