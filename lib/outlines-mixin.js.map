{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/OUTLINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\n_TO_BE_REMOVED_bbox_pattern = /^<rect x=\"(?<x>[-+0-9]+)\" y=\"(?<y>[-+0-9]+)\" width=\"(?<width>[-+0-9]+)\" height=\"(?<height>[-+0-9]+)\"\\/>$/\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_outlines = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    guy.props.def @, 'state', { enumerable: false, value: {}, } unless @state?\n    @state.prv_fontidx            = -1\n    @state.font_idx_by_fontnicks  = {}\n    #.........................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_font_path: ( font_path ) ->\n    return font_path if font_path.startsWith '/'\n    jzrfonts_path = '../../../assets/jizura-fonts'\n    return PATH.resolve PATH.join __dirname, jzrfonts_path, font_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_font_bytes: ( font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n  #---------------------------------------------------------------------------------------------------------\n  register_fontnick: ( cfg ) ->\n    @types.validate.dbr_register_fontnick_cfg ( cfg = { @constructor.C.defaults.dbr_register_fontnick_cfg..., cfg..., } )\n    @db @sql.upsert_fontnick, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _fspath_from_fontnick: ( fontnick ) -> @db.single_value @sql.fspath_from_fontnick, { fontnick, }\n\n  #---------------------------------------------------------------------------------------------------------\n  load_font: ( cfg ) ->\n    clasz = @constructor\n    unless @state.prv_fontidx < clasz.C.last_fontidx\n      throw new E.Dbr_font_capacity_exceeded '^dbr/outlines@1^', clasz.C.last_fontidx + 1\n    #.........................................................................................................\n    @types.validate.dbr_load_font_cfg ( cfg = { @constructor.C.defaults.dbr_load_font_cfg..., cfg..., } )\n    { fontnick\n      fspath  } = cfg\n    #.........................................................................................................\n    throw new E.Dbr_not_implemented '^dbr/outlines@1^', \"setting fspath\" if fspath?\n    return null if @state.font_idx_by_fontnicks[ fontnick ]?\n    #.........................................................................................................\n    fspath      = @_fspath_from_fontnick fontnick\n    font_idx    = ( @state.prv_fontidx += 1 )\n    font_bytes  = @_get_font_bytes fspath\n    @RBW.register_font font_idx, font_bytes\n    @state.font_idx_by_fontnicks[ fontnick ] = font_idx\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_single_outline: ( cfg ) ->\n    ### TAINT this method is highly inefficient for large numbers of outline retrievals; the intention is to\n    replace it with a function that allows for lists of `gid`s to be handled with a single call. ###\n    clasz = @constructor\n    unless @state.prv_fontidx < clasz.C.last_fontidx\n      throw new E.Dbr_font_capacity_exceeded '^dbr/outlines@1^', clasz.C.last_fontidx + 1\n    #.........................................................................................................\n    @types.validate.dbr_get_single_outline_cfg ( cfg = { @constructor.C.defaults.dbr_get_single_outline_cfg..., cfg..., } )\n    { fontnick\n      gid     } = cfg\n    unless ( font_idx = @state.font_idx_by_fontnicks[ fontnick ] )?\n      throw new E.Dbr_unknown_fontnick '^dbr/outlines@1^', fontnick\n    #.........................................................................................................\n    { br, pd, } = JSON.parse @RBW.glyph_to_svg_pathdata font_idx, gid\n    #.........................................................................................................\n    ### TAINT we parse the bounding rectangle (which will look like `<rect x=\"49\" y=\"-613\" width=\"245\"\n    height=\"627\"/>`) so users of this method get (more or less) the format we mean to implement in the\n    future. ###\n    unless ( match = br.match _TO_BE_REMOVED_bbox_pattern )?\n      parameters = rpr { fontnick, gid, br, }\n      throw new E.Dbr_internal_error '^dbr/outlines@1^', \"found unknown format when trying to parse bounding box SVG #{parameters}\"\n    x           = parseInt match.groups.x,      10\n    y           = parseInt match.groups.y,      10\n    width       = parseInt match.groups.width,  10\n    height      = parseInt match.groups.height, 10\n    return { bbox: { x, y, width, height, }, pd, }\n\n\n\n"
  ]
}