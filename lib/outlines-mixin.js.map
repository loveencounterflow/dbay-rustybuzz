{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/OUTLINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nZLIB                      = require 'zlib'\n_TO_BE_REMOVED_bbox_pattern = /^<rect x=\"(?<x>[-+0-9]+)\" y=\"(?<y>[-+0-9]+)\" width=\"(?<width>[-+0-9]+)\" height=\"(?<height>[-+0-9]+)\"\\/>$/\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_outlines = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    guy.props.hide @, 'state', {} unless @state?\n    @state.prv_fontidx            = -1\n    @state.font_idx_by_fontnicks  = {}\n    #.........................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_font_path: ( font_path ) ->\n    return font_path if font_path.startsWith '/'\n    jzrfonts_path = '../../../assets/jizura-fonts'\n    return PATH.resolve PATH.join __dirname, jzrfonts_path, font_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_font_bytes: ( font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n  #---------------------------------------------------------------------------------------------------------\n  register_fontnick: ( cfg ) ->\n    @types.validate.dbr_register_fontnick_cfg ( cfg = { @constructor.C.defaults.dbr_register_fontnick_cfg..., cfg..., } )\n    @db @sql.upsert_fontnick, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _fspath_from_fontnick: ( fontnick ) ->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    return @db.single_value @sql.fspath_from_fontnick, { fontnick, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _font_idx_from_fontnick: ( fontnick )->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    unless ( R = @state.font_idx_by_fontnicks[ fontnick ] )?\n      throw new E.Dbr_unknown_or_unprepared_fontnick '^dbr/outlines@1^', fontnick\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_font: ( cfg ) ->\n    clasz = @constructor\n    unless @state.prv_fontidx < clasz.C.last_fontidx\n      throw new E.Dbr_font_capacity_exceeded '^dbr/outlines@1^', clasz.C.last_fontidx + 1\n    #.........................................................................................................\n    @types.validate.dbr_prepare_font_cfg ( cfg = { @constructor.C.defaults.dbr_prepare_font_cfg..., cfg..., } )\n    { fontnick\n      fspath  } = cfg\n    #.........................................................................................................\n    throw new E.Dbr_not_implemented '^dbr/outlines@1^', \"setting fspath\" if fspath?\n    return null if @state.font_idx_by_fontnicks[ fontnick ]?\n    #.........................................................................................................\n    fspath      = @_fspath_from_fontnick fontnick\n    font_idx    = ( @state.prv_fontidx += 1 )\n    font_bytes  = @_get_font_bytes fspath\n    @RBW.register_font font_idx, font_bytes\n    @state.font_idx_by_fontnicks[ fontnick ] = font_idx\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _parse_sid: ( sid ) -> ( sid.match /^o(?<gid>[0-9]+)(?<fontnick>.+)$/ ).groups\n\n  #---------------------------------------------------------------------------------------------------------\n  get_single_outline: ( cfg ) ->\n    ### TAINT this method is highly inefficient for large numbers of outline retrievals; the intention is to\n    replace it with a function that allows for lists of `gid`s to be handled with a single call. ###\n    #.........................................................................................................\n    @types.validate.dbr_get_single_outline_cfg ( cfg = { @constructor.C.defaults.dbr_get_single_outline_cfg..., cfg..., } )\n    { fontnick\n      gid\n      sid     } = cfg\n    { fontnick\n      gid     } = @_parse_sid sid if sid?\n    # debug '^3334^', { fontnick, gid, sid, }\n    font_idx    = @_font_idx_from_fontnick fontnick\n    #.........................................................................................................\n    { br, pd, } = JSON.parse @RBW.glyph_to_svg_pathdata font_idx, gid\n    #.........................................................................................................\n    ### TAINT we parse the bounding rectangle (which will look like `<rect x=\"49\" y=\"-613\" width=\"245\"\n    height=\"627\"/>`) so users of this method get (more or less) the format we mean to implement in the\n    future. ###\n    unless ( match = br.match _TO_BE_REMOVED_bbox_pattern )?\n      parameters = rpr { fontnick, gid, br, }\n      throw new E.Dbr_internal_error '^dbr/outlines@1^', \"found unknown format when trying to parse bounding box SVG #{parameters}\"\n    x           = parseInt match.groups.x,      10\n    y           = parseInt match.groups.y,      10\n    width       = parseInt match.groups.width,  10\n    height      = parseInt match.groups.height, 10\n    x1          = x + width\n    y1          = y + height\n    return { bbox: { x, y, x1, y1, width, height, }, pd, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _normalize_drb_chrs: ( chrs ) ->\n    chrs = ( chrs.flat Infinity ).join '' if @types.isa.list chrs\n    return ( ( chr.codePointAt 0 ) for chr in Array.from chrs )\n\n  #---------------------------------------------------------------------------------------------------------\n  get_cgid_map: ( cfg ) ->\n    ### Given a list of characters as `chrs` and a `fontnick`, return a `Map` from characters to GIDs\n    (glyf IDs). Unmappable characters will be left out. ###\n    @types.validate.dbr_get_cgid_map_cfg ( cfg = { @constructor.C.defaults.dbr_get_cgid_map_cfg..., cfg..., } )\n    { ads\n      chrs\n      fontnick }  = cfg\n    return @_get_cgid_map_from_ads ads if ads?\n    font_idx    = @_font_idx_from_fontnick fontnick\n    if @types.isa.list chrs then  text = chrs.join '\\n'\n    else                          text = chrs\n    # debug '^344321^', rpr chrs\n    sds         = @shape_text { fontnick, text, }\n    R           = new Map()\n    for sd in sds\n      continue if sd.gid is 0\n      # info '^986^', [ sd.chrs, sd.gid, ]\n      ### TAINT it *might* happen that several distinct `chrs` sequences map to the *same* GID ###\n      R.set sd.gid, sd.chrs\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_cgid_map_from_ads: ( ads ) -> new Map ( [ ad.gid, ad.chrs, ] for ad in ads )\n\n  #-----------------------------------------------------------------------------------------------------------\n  shape_text: ( cfg ) ->\n    @types.validate.dbr_shape_text_cfg ( cfg = { @constructor.C.defaults.dbr_shape_text_cfg..., cfg..., } )\n    { fontnick\n      text      } = cfg\n    font_idx      = @_font_idx_from_fontnick fontnick\n    ads           = @RBW.shape_text { format: 'json', text, font_idx, } # formats: json, rusty, short\n    R             = JSON.parse ads\n    bytes         = Buffer.from text, { encoding: 'utf-8', }\n    for d, idx in R\n      nxt_b   = R[ idx + 1 ]?.b ? Infinity\n      d.chrs  = bytes[ d.b ... nxt_b ].toString()\n      d.sid   = \"o#{d.gid}#{fontnick}\"\n    return R\n\n  #-----------------------------------------------------------------------------------------------------------\n  get_font_metrics: ( cfg ) ->\n    @types.validate.dbr_get_font_metrics_cfg ( cfg = { @constructor.C.defaults.dbr_get_font_metrics_cfg..., cfg..., } )\n    { fontnick }  = cfg\n    font_idx      = @_font_idx_from_fontnick fontnick\n    return JSON.parse @RBW.get_font_metrics font_idx\n\n  #-----------------------------------------------------------------------------------------------------------\n  _zip:   ( txt ) -> ZLIB.deflateRawSync ( Buffer.from txt ), @constructor.C.zlib_zip_cfg\n  _unzip: ( bfr ) -> ( ZLIB.inflateRawSync bfr ).toString()\n\n  #-----------------------------------------------------------------------------------------------------------\n  insert_and_walk_outlines: ( cfg ) ->\n    ### Given a `cfg.fontnick` and a (list or map of) `cfg.cgid_map`, insert the outlines and bounding\n    boxes of the referred glyfs. ###\n    ### TAINT validate ###\n    @types.validate.dbr_insert_outlines_cfg ( cfg = { @constructor.C.defaults.dbr_insert_outlines_cfg..., cfg..., } )\n    { fontnick\n      chrs\n      cgid_map\n      ads             } = cfg\n    cgid_map           ?= @get_cgid_map { fontnick, chrs, ads, }\n    insert_outline      = @db.prepare @sql.insert_outline\n    #.......................................................................................................\n    try\n      @db.begin_transaction() unless @db.within_transaction()\n      for [ gid, chrs, ] from cgid_map\n        { bbox\n          pd    }   = @get_single_outline { gid, fontnick, }\n        { x,  y,\n          x1, y1, } = bbox\n        pd_blob     = @_zip pd\n        yield @db.first_row insert_outline, { fontnick, gid, chrs, x, y, x1, y1, pd_blob, }\n      return null\n    catch error\n      @db.rollback_transaction() if @db.within_transaction()\n      throw error\n    @db.commit_transaction() if @db.within_transaction()\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  insert_outlines: ( cfg ) -> null for _ from @insert_and_walk_outlines cfg; null\n\n  #-----------------------------------------------------------------------------------------------------------\n  typeset: ( cfg ) ->\n    # @types.validate.dbr_typeset_cfg ( cfg = { @constructor.C.defaults.dbr_typeset_cfg..., cfg..., } )\n    { fontnick\n      text              } = cfg\n    #.......................................................................................................\n    ### Shape text, which gives us positions, GIDs/SIDs, and the characters corresponding to each outline.\n    The `required_ads` maps from SIDs to arrangement data items (ADs): ###\n    ads                   = @shape_text { fontnick, text, }\n    required_ads          = {}\n    required_ads[ d.sid ] = d for d in ads\n    known_ods             = {}\n    fm                    = @get_font_metrics { fontnick, }\n    #.......................................................................................................\n    do =>\n      required_sids = Object.keys required_ads\n      for od from @db \"\"\"\n        select\n            *\n          from outlines\n          where sid in #{@db.sql.V required_sids};\"\"\"\n        known_ods[ od.sid ] = od\n        delete required_ads[ od.sid ]\n      return null\n    #.......................................................................................................\n    ### Retrieve (from font) and insert (into DB) missing outline data (ODs) items: ###\n    do =>\n      for od from @insert_and_walk_outlines { fontnick, ads, }\n        delete required_ads[ od.sid ]\n        known_ods[ od.sid ] = od\n    #.......................................................................................................\n    return { ods: known_ods, ads, fm, }\n\n\n"
  ]
}