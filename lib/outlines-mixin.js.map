{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/outlines-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/OUTLINES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nZLIB                      = require 'zlib'\n_TO_BE_REMOVED_bbox_pattern = /^<rect x=\"(?<x>[-+0-9]+)\" y=\"(?<y>[-+0-9]+)\" width=\"(?<width>[-+0-9]+)\" height=\"(?<height>[-+0-9]+)\"\\/>$/\nSQL                       = String.raw\n{ width_of\n  to_width }              = require 'to-width'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_outlines = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$outlines_initialize: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _parse_sid: ( sid ) -> ( sid.match /^o(?<gid>[0-9]+)(?<fontnick>.+)$/ ).groups\n\n  #---------------------------------------------------------------------------------------------------------\n  get_single_outline: ( cfg ) ->\n    ### TAINT this method is highly inefficient for large numbers of outline retrievals; the intention is to\n    replace it with a function that allows for lists of `gid`s to be handled with a single call. ###\n    #.........................................................................................................\n    @types.validate.dbr_get_single_outline_cfg ( cfg = { @constructor.C.defaults.dbr_get_single_outline_cfg..., cfg..., } )\n    { fontnick\n      gid\n      sid     } = cfg\n    { fontnick\n      gid     } = @_parse_sid sid if sid?\n    # debug '^3334^', { fontnick, gid, sid, }\n    font_idx    = @_font_idx_from_fontnick fontnick\n    #.........................................................................................................\n    { br, pd, } = JSON.parse @RBW.glyph_to_svg_pathdata font_idx, gid\n    #.........................................................................................................\n    ### TAINT we parse the bounding rectangle (which will look like `<rect x=\"49\" y=\"-613\" width=\"245\"\n    height=\"627\"/>`) so users of this method get (more or less) the format we mean to implement in the\n    future. ###\n    unless ( match = br.match _TO_BE_REMOVED_bbox_pattern )?\n      parameters = rpr { fontnick, gid, br, }\n      throw new E.Dbr_internal_error '^dbr/outlines@1^', \"found unknown format when trying to parse bounding box SVG #{parameters}\"\n    x           = parseInt match.groups.x,      10\n    y           = parseInt match.groups.y,      10\n    width       = parseInt match.groups.width,  10\n    height      = parseInt match.groups.height, 10\n    x1          = x + width\n    y1          = y + height\n    return { bbox: { x, y, x1, y1, width, height, }, pd, }\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _normalize_drb_chrs: ( chrs ) ->\n  #   chrs = ( chrs.flat Infinity ).join '' if @types.isa.list chrs\n  #   return ( ( chr.codePointAt 0 ) for chr in Array.from chrs )\n\n  #---------------------------------------------------------------------------------------------------------\n  get_cgid_map: ( cfg ) ->\n    ### Given a list of characters as `chrs` and a `fontnick`, return a `Map` from characters to GIDs\n    (glyf IDs). Unmappable characters will be left out. ###\n    @types.validate.dbr_get_cgid_map_cfg ( cfg = { @constructor.C.defaults.dbr_get_cgid_map_cfg..., cfg..., } )\n    { ads\n      chrs\n      fontnick }  = cfg\n    return @_get_cgid_map_from_ads ads if ads?\n    font_idx      = @_font_idx_from_fontnick fontnick\n    if @types.isa.list chrs then  text = chrs.join '\\n'\n    else                          text = chrs\n    sds           = @shape_text { fontnick, text, fm: {}, doc: 0, par: 0, alt: 1, }\n    R             = new Map()\n    for sd in sds\n      continue if sd.gid is 0\n      ### TAINT it *might* happen that several distinct `chrs` sequences map to the *same* GID ###\n      R.set sd.gid, sd.chrs\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_cgid_map_from_ads: ( ads ) ->\n    R = new Map()\n    for ad in ads\n      continue unless ad.gid?\n      R.set ad.gid, ad.chrs\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_font_metrics: ( cfg ) ->\n    @types.validate.dbr_get_font_metrics_cfg ( cfg = { @constructor.C.defaults.dbr_get_font_metrics_cfg..., cfg..., } )\n    { fontnick }  = cfg\n    font_idx      = @_font_idx_from_fontnick fontnick\n    R             = JSON.parse @RBW.get_font_metrics font_idx\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _zip:   ( txt ) -> ZLIB.deflateRawSync ( Buffer.from txt ), @constructor.C.zlib_zip_cfg\n  _unzip: ( bfr ) -> ( ZLIB.inflateRawSync bfr ).toString()\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_and_walk_outlines: ( cfg ) ->\n    ### Given a `cfg.fontnick` and a (list or map of) `cfg.cgid_map`, insert the outlines and bounding\n    boxes of the referred glyfs. ###\n    ### TAINT validate ###\n    @types.validate.dbr_insert_outlines_cfg ( cfg = { @constructor.C.defaults.dbr_insert_outlines_cfg..., cfg..., } )\n    { fontnick\n      chrs\n      cgid_map\n      ads             } = cfg\n    cgid_map           ?= @get_cgid_map { fontnick, chrs, ads, }\n    insert_outline      = @db.prepare @sql.insert_outline\n    { missing }         = @constructor.C\n    #.......................................................................................................\n    try\n      @db.begin_transaction() unless @db.within_transaction()\n      for [ gid, chrs, ] from cgid_map\n        continue if gid <= missing.gid\n        { bbox\n          pd    }   = @get_single_outline { gid, fontnick, }\n        { x,  y,\n          x1, y1, } = bbox\n        pd_blob     = @_zip pd\n        row         = @db.first_row insert_outline, { fontnick, gid, chrs, x, y, x1, y1, pd_blob, }\n        delete row.pd_blob\n        yield row\n    catch error\n      @db.rollback_transaction() if @db.within_transaction()\n      throw error\n    @db.commit_transaction() if @db.within_transaction()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  insert_outlines: ( cfg ) -> null for _ from @insert_and_walk_outlines cfg; null\n\n  #---------------------------------------------------------------------------------------------------------\n  compose: ( cfg ) ->\n    ### Compose (usually up to one paragraph's worth of) text on a single line without line breaks. ###\n    @types.validate.dbr_compose_cfg ( cfg = { @constructor.C.defaults.dbr_compose_cfg..., cfg..., } )\n    { fontnick\n      text\n      known_ods         } = cfg\n    known_ods            ?= {}\n    new_ods               = {}\n    missing_ads           = {}\n    { missing, }          = @constructor.C\n    fm                    = @get_font_metrics { fontnick, }\n    #.......................................................................................................\n    ### Shape text, which gives us positions, GIDs/SIDs, and the characters corresponding to each outline.\n    The `required_ads` maps from SIDs to arrangement data items (ADs): ###\n    ### TAINt return standard glyph for all missing outlines ###\n    doc                   = 1 ### Document ID ###\n    par                   = 1 ### Paragraph ID ###\n    ads                   = @shape_text { fontnick, text, fm, doc, par, alt: 1, }\n    debug '^3494746^'; console.table ads\n    #.......................................................................................................\n    missing_ads[ d.sid ]  = d for d in ads\n    #.......................................................................................................\n    required_sids = Object.keys missing_ads\n    for od from @db SQL\"\"\"\n      select\n          fontnick, gid, sid, chrs, x, y, x1, y1, pd\n      from outlines\n      where ( gid != 0 ) and ( sid in #{@db.sql.V required_sids} );\"\"\"\n      known_ods[ od.sid ] = od\n      delete missing_ads[ od.sid ]\n    #.......................................................................................................\n    ### Retrieve (from font) and insert (into DB) missing outline data (ODs) items: ###\n    for od from @insert_and_walk_outlines { fontnick, ads, }\n      delete missing_ads[ od.sid ]\n      known_ods[  od.sid ]  = od\n      new_ods[    od.sid ]  = od\n    #.......................................................................................................\n    missing_chrs = ( ad for ad in ads when ad.gid is missing.gid )\n    #.......................................................................................................\n    return { known_ods, new_ods, missing_chrs, ads, fm, }\n\n\n"
  ]
}