{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/preparation-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/PREPARATION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_preparation = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    guy.props.hide @, 'state', {} unless @state?\n    @state.prv_fontidx            = -1\n    @state.font_idx_by_fontnicks  = {}\n    #.........................................................................................................\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$preparation_initialize: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  _resolve_font_path: ( font_path ) ->\n    return font_path if font_path.startsWith '/'\n    jzrfonts_path = '../../../assets/jizura-fonts'\n    return PATH.resolve PATH.join __dirname, jzrfonts_path, font_path\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_font_bytes: ( font_path ) -> ( FS.readFileSync font_path ).toString 'hex'\n\n  #---------------------------------------------------------------------------------------------------------\n  register_fontnick: ( cfg ) ->\n    @types.validate.dbr_register_fontnick_cfg ( cfg = { @constructor.C.defaults.dbr_register_fontnick_cfg..., cfg..., } )\n    @db @sql.upsert_fontnick, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _fspath_from_fontnick: ( fontnick ) ->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    return @db.single_value @sql.fspath_from_fontnick, { fontnick, }\n\n  #---------------------------------------------------------------------------------------------------------\n  _font_idx_from_fontnick: ( fontnick )->\n    ### TAINT use fallback to configure behavior in case of failure ###\n    unless ( R = @state.font_idx_by_fontnicks[ fontnick ] )?\n      throw new E.Dbr_unknown_or_unprepared_fontnick '^dbr/preparation@1^', fontnick\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  prepare_font: ( cfg ) ->\n    clasz = @constructor\n    unless @state.prv_fontidx < clasz.C.last_fontidx\n      throw new E.Dbr_font_capacity_exceeded '^dbr/preparation@2^', clasz.C.last_fontidx + 1\n    #.........................................................................................................\n    @types.validate.dbr_prepare_font_cfg ( cfg = { @constructor.C.defaults.dbr_prepare_font_cfg..., cfg..., } )\n    { fontnick\n      fspath  } = cfg\n    #.........................................................................................................\n    throw new E.Dbr_not_implemented '^dbr/preparation@3^', \"setting fspath\" if fspath?\n    return null if @state.font_idx_by_fontnicks[ fontnick ]?\n    #.........................................................................................................\n    try fspath = @_fspath_from_fontnick fontnick catch error\n      if ( @types.type_of error ) is 'dbay_expected_single_row'\n        throw new E.Dbr_unknown_or_unprepared_fontnick '^dbr/preparation@4^', fontnick\n      throw error\n    font_idx    = ( @state.prv_fontidx += 1 )\n    font_bytes  = @_get_font_bytes fspath\n    @RBW.register_font font_idx, font_bytes\n    @state.font_idx_by_fontnicks[ fontnick ] = font_idx\n    @_add_fontmetrics fontnick, font_idx\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _add_fontmetrics: ( fontnick, font_idx ) ->\n    fm          = JSON.parse @RBW.get_font_metrics font_idx\n    fm.fontnick = fontnick\n    @db @sql.insert_fontmetric, fm\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_fontmetrics: ( cfg ) ->\n    @types.validate.dbr_get_fontmetrics_cfg ( cfg = { @constructor.C.defaults.dbr_get_fontmetrics_cfg..., cfg..., } )\n    { fontnick }  = cfg\n    try\n      return @db.single_row SQL\"\"\"\n        select * from #{@cfg.schema}.fontmetrics where fontnick = $fontnick;\"\"\", { fontnick, }\n    catch error\n      if ( @types.type_of error ) is 'dbay_expected_single_row'\n        throw new E.Dbr_unknown_or_unprepared_fontnick '^dbr/preparation@5^', fontnick\n      throw error\n    return R\n\n\n\n"
  ]
}