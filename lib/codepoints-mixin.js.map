{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/codepoints-mixin.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR,EAjB5B;;;EAqBA,IAAC,CAAA,cAAD,GAAkB,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;;;;;;;MAStC,yBAA2B,CAAE,GAAF,CAAA;AAC7B,YAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,SAAA,EAAA,MAAA,EAAA,GAAA,EAAA;QAAI,IAA+F,WAA/F;UAAA,MAAM,IAAI,CAAC,CAAC,mBAAN,CAA0B,oBAA1B,EAAgD,qCAAhD,EAAN;;QACA,CAAA,GAAI,IAAI,GAAJ,CAAA;QACJ,MAAA,GAAS;;UAEP,CAAE,OAAF;UAAW,OAAX,CAFO;;UAIP,CAAE,OAAF;UAAW,OAAX,CAJO;;UAMP,CAAE,OAAF;UAAW,OAAX,CANO;UAQP;;YAAE,OAAF;YAAW,OAAX;WARO;UAUP;;YAAE,OAAF;YAAW,OAAX;WAVO;UAYP;;YAAE,OAAF;YAAW,OAAX;WAZO;UAFb;;;;QAmBI,SAAA,GAAY,mCAAoC,yBAnBpD;;QAqBI,CAAA,GAAI,IAAI,GAAJ,CAAA;QACJ,KAAA,wCAAA;UAAI,CAAE,EAAF,EAAM,EAAN;UACF,KAAW,mGAAX;YACE,KAAgB,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,aAAP,CAAqB,GAArB,CAAf,CAAhB;AAAA,uBAAA;aAAR;;YAEQ,CAAC,CAAC,GAAF,CAAM,MAAM,CAAC,aAAP,CAAqB,GAArB,CAAN;UAHF;QADF;AAKA,eAAO,CAAE,GAAA,CAAF;MA5BkB;;IATW;EAAtB;AArBlB",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/CODEPOINTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nPATH                      = require 'path'\nFS                        = require 'fs'\nE                         = require './errors'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_codepoints = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   #.........................................................................................................\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  get_assigned_unicode_chrs: ( cfg ) ->\n    throw new E.Dbr_not_implemented '^Drb/codepoints@1^', \"cfg for get_assigned_unicode_chrs()\" if cfg?\n    R = new Set()\n    ranges = [\n      # excluded: 0x00, control characters, space\n      [ 0x00021, 0x0d800 ]\n      # excluded: high and low surrogates\n      [ 0x0e000, 0x0f8ff ]\n      # excluded: PUA\n      [ 0x0f900, 0x0fffd ]\n      # excluded: non-characters\n      [ 0x10000, 0x1fffd ] # SMP\n      # excluded: non-characters\n      [ 0x20000, 0x2fffd ] # SIP\n      # excluded: non-characters\n      [ 0x30000, 0x3fffd ] # TIP\n      # excluded: non-characters\n      ]\n    ### see https://unicode.org/reports/tr18/#General_Category_Property ###\n    ### see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Unicode_Property_Escapes ###\n    pattern_A = /^(\\p{L}|\\p{M}|\\p{N}|\\p{S}|\\p{P})/u ### Printing codepoints ###\n    # pattern_B = /^\\P{Cn}$/u                         ### Assigned codepoints ###\n    R = new Set()\n    for [ lo, hi, ] in ranges\n      for cid in [ lo .. hi ]\n        continue unless pattern_A.test String.fromCodePoint cid\n        # continue unless pattern_B.test String.fromCodePoint cid\n        R.add String.fromCodePoint cid\n    return [ R..., ]\n\n\n"
  ]
}