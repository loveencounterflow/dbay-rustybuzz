{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_mirage.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/MIRAGE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require 'guy'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_refresh_datasource_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa.boolean x.force\":         ( x ) -> @isa.boolean x.force\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_append_to_loc_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa.nonempty_text x.locid\":   ( x ) -> @isa.nonempty_text x.locid\n  \"@isa.text x.text\":             ( x ) -> @isa.text x.text\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_walk_line_rows_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n\n\n#===========================================================================================================\nclass @Mrg\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'mrg'\n        loc_splitter:     /(<mrg:loc#[_a-zA-Z][-_a-zA-Z0-9]*\\/>)/g\n        locid_re:         /#(?<locid>[^\\/]+)/\n      #.....................................................................................................\n      mrg_refresh_datasource_cfg:\n        dsk:              null\n        force:            false\n      #.....................................................................................................\n      mrg_append_to_loc_cfg:\n        dsk:              null\n      #.....................................................................................................\n      mrg_walk_line_rows_cfg:\n        dsk:              null\n        locid:            null\n        text:             null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg    = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { db, } = GUY.obj.pluck_with_fallback @cfg, null, 'db'\n    GUY.props.hide @, 'db', db\n    @db.create_stdlib()\n    @cfg    = GUY.lft.freeze @cfg\n    @_create_sql_functions?()\n    @_compile_sql?()\n    @_procure_infrastructure?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db SQL\"\"\"\n      drop table if exists #{prefix}_mirror;\n      drop table if exists #{prefix}_datasources;\n      -- ...................................................................................................\n      create table #{prefix}_datasources (\n        dsk     text not null,\n        path    text not null,\n        digest  text default null,\n        primary key ( dsk ) );\n      -- ...................................................................................................\n      create table #{prefix}_mirror (\n        dsk     text    not null,\n        lnr     integer not null,\n        lnpart  integer not null default 0,\n        xtra    integer not null default 0,\n        isloc   boolean not null default 0,\n        line    text    not null,\n        foreign key ( dsk ) references #{prefix}_datasources,\n        primary key ( dsk, lnr, lnpart, xtra ) );\n      -- ...................................................................................................\n      create table #{prefix}_locs (\n        dsk     text    not null,\n        locid   text    not null,\n        lnr     integer not null,\n        lnpart  integer not null,\n        foreign key ( dsk ) references #{prefix}_datasources,\n        primary key ( dsk, locid ) );\n      -- ...................................................................................................\n      -- needs variables 'dsk', 'locid'\n      create view #{prefix}_location_from_dsk_locid as select\n            dsk,\n            locid,\n            lnr,\n            lnpart\n          from #{prefix}_locs\n          where true\n            and ( dsk   = std_getv( 'dsk'   ) )\n            and ( locid = std_getv( 'locid' ) )\n          limit 1;\n      -- ...................................................................................................\n      -- needs variables 'dsk', 'locid'\n      create view #{prefix}_prv_nxt_xtra_from_dsk_locid as select\n            r1.dsk,\n            std_getv( 'locid' ) as locid,\n            r1.lnr,\n            r1.lnpart,\n            min( r1.xtra ) - 1  as prv_xtra,\n            max( r1.xtra ) + 1  as nxt_xtra\n          from\n            #{prefix}_mirror as r1,\n            ( select lnr, lnpart from #{prefix}_location_from_dsk_locid ) as r2\n          where true\n            and ( r1.dsk     = std_getv( 'dsk' ) )\n            and ( r1.lnr     = r2.lnr            )\n            and ( r1.lnpart  = r2.lnpart         )\n          limit 1;\n      \"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'sql',\n      #.....................................................................................................\n      get_db_object_count:  SQL\"\"\"\n        select count(*) as count from sqlite_schema where starts_with( $name, $prefix || '_' );\"\"\"\n      #.....................................................................................................\n      ds_entry_from_dsk:  SQL\"\"\"\n        select * from #{prefix}_datasources where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      update_digest: SQL\"\"\"\n        update #{prefix}_datasources set digest = $digest where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      delete_lines: SQL\"\"\"\n        delete from #{prefix}_mirror where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      upsert_datasource: @db.create_insert {\n        into:   prefix + '_datasources',\n        fields: [ 'dsk', 'path', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_line: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'line', ], }\n      #.....................................................................................................\n      insert_lnpart: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'lnpart', 'isloc', 'line', ], }\n      #.....................................................................................................\n      insert_xtra: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'lnpart', 'xtra', 'line', ],\n        returning:  '*', }\n      #.....................................................................................................\n      insert_xtra_using_dsk_locid: SQL\"\"\"\n        -- needs variables 'dsk', 'locid'\n        insert into #{prefix}_mirror ( dsk, lnr, lnpart, xtra, line )\n          select\n              $dsk          as dsk,\n              lnr           as lnr,\n              lnpart        as lnpart,\n              nxt_xtra      as nxt_xtra,\n              $text         as line\n            from #{prefix}_prv_nxt_xtra_from_dsk_locid\n          returning *;\"\"\"\n      #.....................................................................................................\n      insert_locid: @db.create_insert {\n        into:       prefix + '_locs',\n        fields:     [ 'dsk', 'locid', 'lnr', 'lnpart', ], }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  register_dsk: ( cfg ) ->\n    # { dsk, path, }  = cfg\n    @db @sql.upsert_datasource, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ds_entry_from_dsk: ( dsk ) -> @db.single_row @sql.ds_entry_from_dsk, { dsk, }\n  _update_digest: ( dsk, digest ) -> @db @sql.update_digest, { dsk, digest, }\n  _delete_lines: ( dsk ) -> @db @sql.delete_lines, { dsk, }\n\n  #---------------------------------------------------------------------------------------------------------\n  refresh_datasource: ( cfg ) ->\n    validate.mrg_refresh_datasource_cfg ( cfg = { @constructor.C.defaults.mrg_refresh_datasource_cfg..., cfg..., } )\n    { dsk         \n      force       } = cfg\n    { prefix\n      loc_splitter\n      locid_re   } = @cfg\n    { path\n      digest      } = @_ds_entry_from_dsk dsk\n    current_digest  = GUY.fs.get_content_hash path\n    counts          = { files: 0, bytes: 0, }\n    #.......................................................................................................\n    if force or ( digest isnt current_digest )\n      #.....................................................................................................\n      @db =>\n        @_delete_lines dsk\n        insert_line   = @db.prepare @sql.insert_line\n        insert_lnpart = @db.prepare @sql.insert_lnpart\n        insert_locid  = @db.prepare @sql.insert_locid\n        lnr           = 0\n        #...................................................................................................\n        for line from GUY.fs.walk_lines path, { decode: false, }\n          lnr++\n          counts.bytes   += line.length\n          line            = line.toString 'utf-8'\n          parts           = line.split loc_splitter\n          if parts.length is 1\n            insert_line.run { dsk, lnr, line, }\n          else\n            isloc   = true\n            lnpart  = -1\n            for part in parts\n              lnpart++\n              if ( isloc = not isloc )\n                { locid, }  = ( part.match locid_re ).groups\n                insert_locid.run  { dsk, lnr, lnpart, locid, }\n                insert_lnpart.run   { dsk, lnr, lnpart, isloc: 1, line: part, }\n              else\n                insert_lnpart.run { dsk, lnr, lnpart, isloc: 0, line: part, }\n        #...................................................................................................\n        counts.files++\n        @_update_digest dsk, current_digest\n        return null\n    #.......................................................................................................\n    return counts\n\n\n  #=========================================================================================================\n  # CONTENT RETRIEVAL\n  #---------------------------------------------------------------------------------------------------------\n  get_line_rows: ( cfg ) -> [ ( @walk_line_rows cfg )..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_line_rows: ( cfg ) ->\n    validate.mrg_walk_line_rows_cfg ( cfg = { @constructor.C.defaults.mrg_walk_line_rows_cfg..., cfg..., } )\n    { dsk     } = cfg\n    { prefix  } = @cfg\n    return @db SQL\"\"\"\n      select distinct\n          dsk                                             as dsk,\n          lnr                                             as lnr,\n          coalesce( group_concat( line, '' ) over w, '' ) as line\n        from #{prefix}_mirror\n        where true\n          and ( dsk = $dsk )\n          -- and ( not isloc )\n        window w as (\n          partition by lnr\n          order by lnpart, xtra\n          range between unbounded preceding and unbounded following );\n      \"\"\", { dsk, }\n\n  #=========================================================================================================\n  # CONTENT MANIPULATION\n  # #---------------------------------------------------------------------------------------------------------\n  # _lnr_lnpart_from_dsk_locid: ( dsk, locid ) ->\n  #   @db.setv 'dsk',   dsk\n  #   @db.setv 'locid', locid\n  #   return @db.single_row SQL\"select * from #{@cfg.prefix}_location_from_dsk_locid;\"\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _prv_nxt_xtra_from_dsk_locid: ( dsk, locid ) ->\n  #   @db.setv 'dsk',   dsk\n  #   @db.setv 'locid', locid\n  #   return @db.single_row SQL\"select * from #{@cfg.prefix}_prv_nxt_xtra_from_dsk_locid;\"\n\n  # #---------------------------------------------------------------------------------------------------------\n  # append_to_loc_OLD: ( cfg ) ->\n  #   validate.mrg_append_to_loc_cfg ( cfg = { @constructor.C.defaults.mrg_append_to_loc_cfg..., cfg..., } )\n  #   { dsk\n  #     locid\n  #     text    } = cfg\n  #   insert_xtra = @db.prepare @sql.insert_xtra\n  #   return @db =>\n  #     { lnr, lnpart, prv_xtra, nxt_xtra, } = @_prv_nxt_xtra_from_dsk_locid dsk, locid\n  #     return @db.first_row insert_xtra, { dsk, locid, lnr, lnpart, xtra: nxt_xtra, line: text, }\n\n  #---------------------------------------------------------------------------------------------------------\n  append_to_loc: ( cfg ) ->\n    validate.mrg_append_to_loc_cfg ( cfg = { @constructor.C.defaults.mrg_append_to_loc_cfg..., cfg..., } )\n    { dsk\n      locid\n      text    } = cfg\n    { prefix  } = @cfg\n    @db.setv 'dsk',   dsk\n    @db.setv 'locid', locid\n    return @db.first_row @sql.insert_xtra_using_dsk_locid, { dsk, text, }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}