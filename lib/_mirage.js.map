{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/_mirage.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ/MIRAGE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = new ( require 'intertype' ).Intertype()\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nGUY                       = require 'guy'\n\n\n#===========================================================================================================\ntypes.declare 'constructor_cfg', tests:\n  \"@isa.object x\":                                  ( x ) -> @isa.object x\n  \"( @isa.object x.db ) or ( @isa.function x.db \":  ( x ) -> ( @isa.object x.db ) or ( @isa.function x.db )\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'mrg_refresh_datasource_cfg', tests:\n  \"@isa.object x\":                ( x ) -> @isa.object x\n  \"@isa.nonempty_text x.dsk\":     ( x ) -> @isa.nonempty_text x.dsk\n  \"@isa.boolean x.force\":         ( x ) -> @isa.boolean x.force\n\n\n#===========================================================================================================\nclass @Mrg\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: GUY.lft.freeze\n    defaults:\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'mrg'\n        loc_pattern:      /<mrg:loc#(?<id>[_a-zA-Z][-_a-zA-Z0-9]*)\\/>/g\n        # schema:           'mrg'\n      #.....................................................................................................\n      mrg_refresh_datasource_cfg:\n        dsk:              null\n        force:            false\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    @cfg    = { @constructor.C.defaults.constructor_cfg..., cfg..., }\n    GUY.props.hide @, 'types', types\n    @types.validate.constructor_cfg @cfg\n    { db, } = GUY.obj.pluck_with_fallback @cfg, null, 'db'\n    GUY.props.hide @, 'db', db\n    @cfg    = GUY.lft.freeze @cfg\n    @_create_sql_functions?()\n    @_compile_sql?()\n    @_procure_infrastructure?()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _procure_infrastructure: ->\n    ### TAINT skip if tables found ###\n    { prefix } = @cfg\n    @db SQL\"\"\"\n      drop table if exists #{prefix}_mirror;\n      drop table if exists #{prefix}_datasources;\n      -- ...................................................................................................\n      create table #{prefix}_datasources (\n        dsk     text not null,\n        path    text not null,\n        digest  text default null,\n        primary key ( dsk ) );\n      -- ...................................................................................................\n      create table #{prefix}_mirror (\n        dsk     text    not null,\n        lnr     integer not null,\n        line    text    not null,\n        foreign key ( dsk ) references #{prefix}_datasources,\n        primary key ( dsk, lnr ) );\n      -- ...................................................................................................\n      create table #{prefix}_locs (\n        dsk     text    not null,\n        loci    text    not null,\n        lnr     integer not null,\n        foreign key ( dsk ) references #{prefix}_datasources,\n        primary key ( dsk, loci ) );\n      \"\"\"\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix } = @cfg\n    #.......................................................................................................\n    GUY.props.hide @, 'sql',\n      #.....................................................................................................\n      get_db_object_count:  SQL\"\"\"\n        select count(*) as count from sqlite_schema where starts_with( $name, $prefix_ );\"\"\"\n      #.....................................................................................................\n      ds_entry_from_dsk:  SQL\"\"\"\n        select * from #{prefix}_datasources where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      update_digest: SQL\"\"\"\n        update #{prefix}_datasources set digest = $digest where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      delete_lines: SQL\"\"\"\n        delete from #{prefix}_mirror where dsk = $dsk;\"\"\"\n      #.....................................................................................................\n      upsert_datasource: @db.create_insert {\n        into:   prefix + '_datasources',\n        fields: [ 'dsk', 'path', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_line: @db.create_insert {\n        into:       prefix + '_mirror',\n        fields:     [ 'dsk', 'lnr', 'line', ], }\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  register_dsk: ( cfg ) ->\n    # { dsk, path, }  = cfg\n    @db @sql.upsert_datasource, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _ds_entry_from_dsk: ( dsk ) -> @db.single_row @sql.ds_entry_from_dsk, { dsk, }\n  _update_digest: ( dsk, digest ) -> @db @sql.update_digest, { dsk, digest, }\n  _delete_lines: ( dsk ) -> @db @sql.delete_lines, { dsk, }\n\n  #---------------------------------------------------------------------------------------------------------\n  refresh_datasource: ( cfg ) ->\n    validate.mrg_refresh_datasource_cfg ( cfg = { @constructor.C.defaults.mrg_refresh_datasource_cfg..., cfg..., } )\n    { dsk         \n      force       } = cfg\n    { prefix\n      loc_pattern } = @cfg\n    { path\n      digest      } = @_ds_entry_from_dsk dsk\n    current_digest  = GUY.fs.get_content_hash path\n    counts          = { files: 0, bytes: 0, }\n    if force or ( digest isnt current_digest )\n      @db =>\n        @_delete_lines dsk\n        insert_line = @db.prepare @sql.insert_line\n        lnr         = 0\n        for line from GUY.fs.walk_lines path, { decode: false, }\n          lnr++\n          counts.bytes += line.length\n          line          = line.toString 'utf-8'\n          for match from line.matchAll loc_pattern\n            { id: loc_id, } = match.groups\n            debug '^54949^', { lnr, line, loc_id, }\n          insert_line.run { dsk, lnr, line, }\n        counts.files++\n        @_update_digest dsk, current_digest\n        return null\n    return counts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}