{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/arrangement-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/ARRANGEMENT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\n{ width_of\n  to_width }              = require 'to-width'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_arrangement = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$arrangement_initialize: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  ### 'arrange()' like 'compose()' and 'distribute()' ###\n  arrange: ( cfg ) ->\n    @types.validate.dbr_arrange_cfg ( cfg = { @constructor.C.defaults.dbr_arrange_cfg..., cfg..., } )\n    ads     = @_shape_text        { cfg..., alt: 1, }\n    shy_ads = @_shape_hyphenated  { cfg..., ads, }\n    return [ ads..., shy_ads..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _shape_hyphenated: ( cfg ) ->\n    ### TAINT use proper validation ###\n    { fontnick\n      doc\n      par\n      ads         } = cfg\n    { schema      } = @cfg\n    { V, I, L,    } = @sql\n    { shy         } = @constructor.C.special_chrs\n    left_ads        = []\n    right_ads       = []\n    #.......................................................................................................\n    { alt_max, } = @db.single_row SQL\"\"\"\n      select max( alt ) as alt_max\n      from #{schema}.ads where ( doc = $doc ) and ( par = $par );\"\"\", { doc, par, }\n    new_alt = alt_max\n    #.......................................................................................................\n    for { shy_b1, shy_sgi, } in @db.all_rows SQL\"\"\"\n      select b1 as shy_b1, sgi as shy_sgi from #{schema}.ads\n        where true\n          and ( doc = $doc )\n          and ( par = $par )\n          and ( br  = 'shy' )\n          and ( alt = 1 );\"\"\", { doc, par, }\n      #.....................................................................................................\n      # First batch: Characters in same shape group as SHY, up to the shy, with an added hyphen:\n      { text, b1, b2, dx0, } = @db.first_row SQL\"\"\"\n        select\n            coalesce(\n              group_concat( case when br = 'shy' then '' else chrs end, '' ),\n              '' ) || '-'             as text,\n            min( x )                  as dx0,\n            min( b1 )                 as b1,\n            max( b2 )                 as b2\n          from ads\n          where true\n            and ( doc = $doc )\n            and ( par = $par )\n            and ( sgi = $shy_sgi )\n            and ( b1 <= $shy_b1 )\n            and ( alt = 1 )\n          order by b1, id;\"\"\", { doc, par, shy_b1, shy_sgi, }\n      urge '^460971^', { shy_b1, shy_sgi, dx0, text, new_alt, }\n      new_alt++\n      left_ads      = @_shape_text { cfg..., text, b1, b2, dx0, alt: new_alt, osgi: shy_sgi, }\n      # last_left_ad  = left_ads[ left_ads.length - 1 ]\n      #.....................................................................................................\n      { text, b1, b2, dx2, } = @db.first_row SQL\"\"\"\n        select\n            coalesce(\n              group_concat( case when br = 'shy' then '' else chrs end, '' ),\n              '' )                    as text,\n            max( x1 )                 as dx2,\n            min( b1 )                 as b1,\n            max( b2 )                 as b2\n          from ads\n          where true\n            and ( doc = $doc )\n            and ( par = $par )\n            and ( sgi = $shy_sgi )\n            and ( b1  > $shy_b1 )\n            and ( alt = 1 )\n          order by b1, id;\"\"\", { doc, par, shy_b1, shy_sgi, }\n      info '^460971^', { text, dx2, }\n      if text isnt ''\n        urge '^460971^', { shy_b1, shy_sgi, dx2, text, new_alt, }\n        right_ads = @_shape_text { cfg..., text, b1, b2, dx2, alt: new_alt, osgi: shy_sgi, }\n      urge '^460971^'\n    #.......................................................................................................\n    return [ left_ads..., right_ads..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepare_ads: ( text, fontnick, ads ) ->\n    ### As it stands `rustybuzz-wasm` will follow `rustybuzz` in that soft hyphens (SHYs) and word break\n    opportunities (WBRs) either get their own arrangement data item (AD) or else are tacked to the *front*\n    of one or more letters when they appear in the middle of a ligature (as in `af&shy;firm` with ligature\n    `ff` or `ffi`). In order to simplify processing and remove the case distinction, we normalize all cases\n    where WBRs and SHYs appear with other material to always make them standalone ADs. ###\n    R                 = []\n    { special_chrs\n      byte_counts\n      ignored       } = @constructor.C\n    bytes             = Buffer.from text, { encoding: 'utf-8', }\n    prv_ad            = null\n    for ad, idx in ads\n      ad.b1     = ad.b\n      ad.b2     = ads[ idx + 1 ]?.b ? bytes.length\n      delete ad.b\n      ad.chrs   = bytes[ ad.b1 ... ad.b2 ].toString()\n      extra_ad  = null\n      has_shy   = false\n      has_wbr   = false\n      if      ad.chrs.startsWith special_chrs.shy then has_shy = true\n      else if ad.chrs.startsWith special_chrs.wbr then has_wbr = true\n      if has_shy or has_wbr\n        ad.br           = if has_shy then 'shy' else 'wbr'\n        if ad.chrs.length > 1 ### NOTE safe b/c we know SHY is BMP codepoint ###\n          extra_ad      = { ad..., }\n          ad.b2         = ad.b1 + byte_counts[ if has_shy then 'shy' else 'wbr' ]\n          extra_ad.chrs = ad.chrs[ 1 .. ]\n          extra_ad.b1   = ad.b2\n          extra_ad.br   = null\n          extra_ad.gid  = ignored.gid\n          extra_ad.sid  = \"o#{ignored.gid}#{fontnick}\"\n          ad.chrs       = ad.chrs[ 0 ]\n          ad.dx         = 0\n          ad.x1         = ad.x\n      else if ad.chrs is ' '\n        ad.br           = 'spc'\n      else if ad.chrs is '-'\n        ad.br           = 'hhy'\n      R.push ad\n      if extra_ad?\n        R.push extra_ad\n        extra_ad = null\n    prv_ad = ad\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _shape_text: ( cfg ) ->\n    { fontnick\n      text\n      dx0   ### NOTE optional leftmost  x reference coordinate ###\n      dx2   ### NOTE optional rightmost x reference coordinate ###\n      b1    ### NOTE optional leftmost byte index ###\n      b2    ### NOTE optional rightmost byte index ###\n      doc\n      par\n      alt\n      osgi      } = cfg\n    { missing   } = @constructor.C\n    skip_ends     = dx0? or dx2? ### TAINT will probably be removed ###\n    b1           ?= 0\n    b2           ?= null\n    dx0          ?= 0 ### TAINT use validation, defaults ###\n    dx2          ?= null\n    font_idx      = @_font_idx_from_fontnick fontnick\n    ads           = @RBW.shape_text { format: 'json', text, font_idx, }\n    ads           = JSON.parse ads\n    ads           = @_prepare_ads text, fontnick, ads\n    { schema, }   = @cfg\n    #.......................................................................................................\n    ced_x           = 0 # cumulative error displacement from missing outlines\n    ced_y           = 0 # cumulative error displacement from missing outlines\n    osgi           ?= null\n    sgi             = 0\n    ### TAINT will not properly handle multiple SHYs in the same segment (this might happen in ligatures\n    like `ffi`) ###\n    for ad, idx in ads\n      sgi++ unless ad.nobr\n      ad.doc    = doc\n      ad.par    = par\n      ad.alt    = alt\n      ad.b1    += b1\n      ad.b2    += b1\n      ad.sgi    = sgi\n      ad.osgi   = osgi\n      ad.sid    = \"o#{ad.gid}#{fontnick}\"\n      ad.x     += ced_x\n      ad.y     += ced_y\n      #.....................................................................................................\n      # Replace original metrics with those of missing outline:\n      if ad.gid is missing.gid\n        if ( width_of ( Array.from ad.chrs )[ 0 ] ) < 2\n          width = 500\n        else\n          width = 1000\n        ed_x    = width - ad.dx\n        ced_x  += ed_x\n        ad.dx   = width\n      #.....................................................................................................\n      ad.x    = Math.round ad.x + dx0\n      ad.y    = Math.round ad.y\n      ad.dx   = Math.round ad.dx\n      ad.dy   = Math.round ad.dy\n      ad.x1   = ad.x + ad.dx\n      # debug '^3447^', ( rpr ad.chrs ), to_width ( rpr ad ), 100\n    #.......................................................................................................\n    if b2?  then  ads[ ads.length - 1 ].b2 = b2\n    if dx2? then  delta_x = dx2 - ads[ ads.length - 1 ].x1\n    else          delta_x = 0\n    #.......................................................................................................\n    @db =>\n      insert_ad = @db.prepare @sql.insert_ad\n      for ad, idx in ads\n        ad.x       += delta_x\n        ad.x1      += delta_x\n        row         = { br: null, ad..., }\n        row.nobr    = if row.nobr then 1 else 0\n        # debug '^545456^', row\n        ads[ idx ]  = @db.first_row insert_ad, row\n      return null\n    #.......................................................................................................\n    return ads\n"
  ]
}