{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/arrangement-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/ARRANGEMENT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\n{ width_of\n  to_width }              = require 'to-width'\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_arrangement = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  # _$arrangement_initialize: ->\n\n  #---------------------------------------------------------------------------------------------------------\n  ### 'arrange()' like 'compose()' and 'distribute()' ###\n  shape_text: ( cfg ) ->\n    @types.validate.dbr_shape_text_cfg ( cfg = { @constructor.C.defaults.dbr_shape_text_cfg..., cfg..., } )\n    { ads, shy_data, }  = @_shape_text        { cfg..., alt: 1, }\n    shy_ads             = @_shape_hyphenated  { cfg..., ads, shy_data, }\n    return [ ads..., shy_ads..., ]\n\n  #---------------------------------------------------------------------------------------------------------\n  _shape_hyphenated: ( cfg ) ->\n    ### TAINT use proper validation ###\n    { fontnick\n      doc\n      par\n      ads\n      shy_data    } = cfg\n    { schema      } = @cfg\n    { V, I, L,    } = @sql\n    { shy         } = @constructor.C.special_chrs\n    R               = []\n    # return R # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    #.......................................................................................................\n    { alt_max, } = @db.single_row SQL\"\"\"\n      select max( alt ) as alt_max\n      from #{schema}.ads where ( doc = $doc ) and ( par = $par );\"\"\", { doc, par, }\n    new_alt = alt_max\n    #.......................................................................................................\n    for { doc, par, adi, alt, } in shy_data\n      ads = @db.all_rows SQL\"\"\"\n        select\n            *\n          from #{schema}.ads\n          where true\n            and ( doc = $doc )\n            and ( par = $par )\n            and ( alt = $alt )\n            and ( sgi in ( select\n              distinct sgi\n            from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi in ( $adi - 1, $adi, $adi + 1 ) ) )\n              and ( alt = $alt ) );\"\"\", { doc, par, adi, alt, }\n      dx0       = ads[ 0 ].x\n      # urge \"^4084^ segments for SHY\", { doc, par, adi, alt, dx0, }; console.table ads\n      shy_idxs  = ( idx for ad, idx in ads when ad.br is 'shy' )\n      for shy_idx, alt_delta in shy_idxs\n        new_alt++\n        ### TAINT wrong if there's more than one hyphen ###\n        text      = ( ( if ad.chrs is shy then '-' else ad.chrs ) for ad in ads ).join ''\n        # ### TAINT wrong if there's more than one hyphen ###\n        # ad.br     = 'hhy' if ad.br is 'shy'\n        adi_0     = ads[ 0 ].adi\n        # debug '^4084^', rpr text\n        { ads: hhy_ads, } = @_shape_text { cfg..., text, adi_0, dx0, alt: new_alt, }\n        R = [ R..., hhy_ads..., ]\n        # debug '^3345345^', hhy_ads\n    # urge \"^4084^ segments for HHY\"; console.table @db.all_rows SQL\"\"\"\n    #   select * from ads where alt > 1 order by doc, par, alt, adi;\"\"\"\n    # #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepare_ads: ( text, fontnick, ads ) ->\n    ### As it stands `rustybuzz-wasm` will follow `rustybuzz` in that soft hyphens (SHYs) and word break\n    opportunities (WBRs) either get their own arrangement data item (AD) or else are tacked to the *front*\n    of one or more letters when they appear in the middle of a ligature (as in `af&shy;firm` with ligature\n    `ff` or `ffi`). In order to simplify processing and remove the case distinction, we normalize all cases\n    where WBRs and SHYs appear with other material to always make them standalone ADs. ###\n    R                 = []\n    { special_chrs\n      ignored       } = @constructor.C\n    bytes             = Buffer.from text, { encoding: 'utf-8', }\n    prv_ad            = null\n    for ad, adi in ads\n      nxt_b     = ads[ adi + 1 ]?.b ? Infinity\n      ad.chrs   = bytes[ ad.b ... nxt_b ].toString()\n      extra_ad  = null\n      has_shy   = false\n      has_wbr   = false\n      if      ad.chrs.startsWith special_chrs.shy then has_shy = true\n      else if ad.chrs.startsWith special_chrs.wbr then has_wbr = true\n      if has_shy or has_wbr\n        ad.br           = if has_shy then 'shy' else 'wbr'\n        if ad.chrs.length > 1 ### NOTE safe b/c we know SHY is BMP codepoint ###\n          extra_ad      = { ad..., }\n          extra_ad.chrs = ad.chrs[ 1 .. ]\n          extra_ad.br   = null\n          extra_ad.gid  = ignored.gid\n          extra_ad.sid  = \"o#{ignored.gid}#{fontnick}\"\n          ad.chrs       = ad.chrs[ 0 ]\n          ad.dx         = 0\n          ad.x1         = ad.x\n      else if ad.chrs is ' '\n        ad.br           = 'spc'\n      else if ad.chrs is '-'\n        ad.br           = 'hhy'\n      R.push ad\n      if extra_ad?\n        R.push extra_ad\n        extra_ad = null\n    prv_ad = ad\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _shape_text: ( cfg ) ->\n    { fontnick\n      text\n      adi_0 ### NOTE optional first AD index ###\n      dx0   ### NOTE optional x reference coordinate ###\n      doc\n      par\n      alt       } = cfg\n    { missing }   = @constructor.C\n    adi_0_given   = adi_0?\n    adi_0        ?= 0 ### TAINT use validation, defaults ###\n    dx0          ?= 0 ### TAINT use validation, defaults ###\n    font_idx      = @_font_idx_from_fontnick fontnick\n    ads           = @RBW.shape_text { format: 'json', text, font_idx, }\n    ads           = JSON.parse ads\n    ads           = @_prepare_ads text, fontnick, ads\n    shy_data  = []\n    #.......................................................................................................\n    unless adi_0_given\n      ads.unshift { doc, par, adi: 0, alt, sgi: 0, \\\n        gid: null, b: null, x: 0, y: 0, dx: 0, dy: 0, x1: 0, chrs: null, sid: null, \\\n        nobr: 0, br: 'start', }\n    ced_x           = 0 # cumulative error displacement from missing outlines\n    ced_y           = 0 # cumulative error displacement from missing outlines\n    sgi             = 0\n    ### TAINT will not properly handle multiple SHYs in the same segment (this might happen in ligatures\n    like `ffi`) ###\n    for ad, idx in ads\n      continue if ( not adi_0_given ) and ( idx is 0 )\n      adi       = adi_0 + idx\n      #.....................................................................................................\n      sgi++ unless ad.nobr\n      ad.sgi    = sgi\n      ad.doc    = doc\n      ad.par    = par\n      ad.adi    = adi\n      ad.alt    = alt\n      ad.sid    = \"o#{ad.gid}#{fontnick}\"\n      ad.x     += ced_x\n      ad.y     += ced_y\n      shy_data.push { doc, par, adi, alt, } if ad.br is 'shy'\n      #.....................................................................................................\n      # Replace original metrics with those of missing outline:\n      if ad.gid is missing.gid\n        if ( width_of ( Array.from ad.chrs )[ 0 ] ) < 2\n          width = 500\n        else\n          width = 1000\n        ed_x    = width - ad.dx\n        ced_x  += ed_x\n        ad.dx   = width\n      #.....................................................................................................\n      ad.x    = Math.round ad.x + dx0\n      ad.y    = Math.round ad.y\n      ad.dx   = Math.round ad.dx\n      ad.dy   = Math.round ad.dy\n      ad.x1   = ad.x + ad.dx\n      # debug '^3447^', ( rpr ad.chrs ), to_width ( rpr ad ), 100\n    #.......................................................................................................\n    unless adi_0_given\n      last_adi  = ads.length - 1\n      last_ad   = ads[ last_adi ]\n      this_adi  = last_adi + 1\n      ads.push { doc, par, adi: this_adi, alt, sgi: last_ad.sgi + 1, \\\n        gid: null, b: null, x: last_ad.x1, y: last_ad.y, dx: 0, dy: 0, \\\n        x1: last_ad.x1, chrs: null, sid: null, \\\n        nobr: 0, br: 'end', }\n    #.......................................................................................................\n    @db =>\n      insert_ad = @db.prepare @sql.insert_ad\n      for ad, idx in ads\n        row         = { br: null, ad..., }\n        row.nobr    = if row.nobr then 1 else 0\n        ads[ idx ]  = @db.first_row insert_ad, row\n      return null\n    #.......................................................................................................\n    return { ads, shy_data, }\n"
  ]
}