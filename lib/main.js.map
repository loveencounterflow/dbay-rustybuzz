{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\nhome                      = PATH.resolve PATH.join __dirname, '..'\n# data_path                 = PATH.join home, 'data'\n{ Drb_preparation }       = require './preparation-mixin'\n{ Drb_outlines }          = require './outlines-mixin'\n{ Drb_codepoints }        = require './codepoints-mixin'\n{ Drb_distribution }      = require './distribution-mixin'\nfont_path                 = PATH.resolve PATH.join __dirname, '../fonts'\nZLIB                      = require 'zlib'\n\n\n#===========================================================================================================\nclass @Drb extends Drb_outlines Drb_distribution Drb_codepoints Drb_preparation()\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    # replacement:  'â–ˆ'\n    last_fontidx:       15\n    zlib_zip_cfg:       { level: 1, strategy: ZLIB.constants.Z_HUFFMAN_ONLY, }\n    ### TAINT try to reorder specials for better comprehension ###\n    # special:\n    #   missing:\n    #     gid:    0\n    #   ignored:\n    #     gid:   -1\n    gids:\n      # '-4':           'sop'       # start of paragraph\n      # '-3':           'eop'       # end of paragraph\n      '-2':           'reserved'  # for future purposes\n      '-1':           'ignored'   # for ADs that intentionally have no outline (but may appear in debugging)\n      '0':            'missing'   # font cannot render this codepoint\n    ignored:\n      gid:             -1\n    missing:\n      gid:              0\n    special_chrs:\n      hhy:              '\\u{002d}' # hard hyphen\n      shy:              '\\u{00ad}' # soft hyphen\n      wbr:              '\\u{200b}' # word break opportunity (as in `foo/bar` with a WBR after the slash)\n    defaults:\n      #.....................................................................................................\n      dbr_register_fontnick_cfg:\n        fontnick:         null\n        fspath:           null\n      #.....................................................................................................\n      dbr_prepare_font_cfg:\n        fontnick:         null\n        gid:              null\n      #.....................................................................................................\n      dbr_get_cgid_map_cfg:\n        fontnick:         null\n        cids:             null\n        chrs:             null\n        ads:              null\n      #.....................................................................................................\n      dbr_insert_outlines_cfg:\n        fontnick:         null\n        cgid_map:         null\n        cids:             null\n        chrs:             null\n        ads:              null\n      #.....................................................................................................\n      dbr_get_single_outline_cfg:\n        fontnick:         null\n        gid:              null\n        sid:              null\n      #.....................................................................................................\n      dbr_shape_text_cfg:\n        fontnick:         null\n        text:             null\n        doc:              null\n        par:              null\n        vrt:              null\n      #.....................................................................................................\n      dbr_get_font_metrics_cfg:\n        fontnick:         null\n      #.....................................................................................................\n      dbr_compose_cfg:\n        fontnick:         null\n        text:             null\n        known_ods:        null\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'drb_'\n        schema:           'drb'\n        rebuild:          false\n        # path:             PATH.join home,      'cmudict.sqlite'\n        std_fontnicks:\n          gi:               PATH.join font_path, 'ebgaramond/EBGaramond12-Italic.otf'\n          gr:               PATH.join font_path, 'ebgaramond/EBGaramond12-Regular.otf'\n          amr:              PATH.join font_path, 'amiri/Amiri-Regular.ttf'\n          hora:             PATH.join font_path, 'schÃ¤ffel.ch/2002_horatius.otf'\n          b42:              PATH.join font_path, 'schÃ¤ffel.ch/1455_gutenberg_b42.otf'\n          b36:              PATH.join font_path, 'schÃ¤ffel.ch/1458_gutenberg_b36.otf'\n        RBW:              null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me, cfg = null ) ->\n    clasz           = me.constructor\n    R               = cfg ? me.cfg\n    # #.......................................................................................................\n    # if R.path?\n    #   R.temporary  ?= false\n    #   R.path        = PATH.resolve R.path\n    # else\n    #   R.temporary  ?= true\n    #   filename        = me._get_random_filename()\n    #   R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.types.validate.constructor_cfg me.cfg\n    #.......................................................................................................\n    if me.cfg.RBW?  then  { RBW, }  = guy.obj.pluck_with_fallback me.cfg, null, 'RBW'\n    else                    RBW     = require 'rustybuzz-wasm'\n    guy.props.hide me, 'RBW', RBW\n    #.......................................................................................................\n    { db, }       = guy.obj.pluck_with_fallback me.cfg, null, 'db'\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    guy.props.hide me, 'db',     db\n    guy.props.hide me, 'cache',  {}\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    guy.cfg.configure_with_types @, cfg, types\n    @_create_sql_functions()\n    @_compile_sql()\n    @_$preparation_initialize?()\n    @_$outlines_initialize?()\n    @_$distribution_initialize?()\n    @_$codepoints_initialize?()\n    @_open_drb_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      schema    } = @cfg\n    #.......................................................................................................\n    @db.execute SQL\"\"\"\n      drop table if exists #{schema}.outlines;\n      drop table if exists #{schema}.fontnicks;\n      drop index if exists #{schema}.ads_location_idx;\n      drop table if exists #{schema}.ads;\n      drop view  if exists #{schema}.current_brp;\n      drop view  if exists #{schema}.current_brps;\n      -- ...................................................................................................\n      vacuum #{schema};\n      -- ...................................................................................................\n      create table #{schema}.fontnicks (\n          fontnick    text    not null,\n          fspath      text    not null,\n        primary key ( fontnick ) );\n      -- ...................................................................................................\n      create table #{schema}.outlines (\n          fontnick  text    not null references fontnicks ( fontnick ),\n          gid       integer not null,\n          sid       text generated always as ( 'o' || gid || fontnick ) virtual,\n          chrs      text,\n          /* Shape ID (SID): */\n          /* bounding box */\n          x         float   not null,\n          y         float   not null,\n          x1        float   not null,\n          y1        float   not null,\n          /* PathData (PD): */\n          pd        text generated always as ( #{prefix}unzip( pd_blob ) ) virtual,\n          pd_blob   blob    not null,\n          primary key ( fontnick, gid ) );\n      -- ...................................................................................................\n      create table #{schema}.ads (\n          id      integer not null primary key,\n          doc     integer not null, -- document idx\n          par     integer not null, -- paragraph idx\n          adi     integer not null, -- arr. dat. idx\n          vrt     integer not null, -- variant idx\n          sgi     integer not null, -- segment idx, a segment being a suite of ADs that must be reshaped if broken\n          gid     integer,\n          b       integer,\n          x       integer not null,\n          y       integer not null,\n          dx      integer not null,\n          dy      integer not null,\n          x1      integer generated always as ( x + dx ) virtual not null,\n          -- y1      integer generated always as ( y + dy ) virtual not null,\n          chrs    text,\n          sid     text,\n          nobr    boolean not null,\n          br      text,\n          lnr     integer default null, -- line number (from the left)\n          rnr     integer default null  -- line number (from the right)\n          );\n      -- ...................................................................................................\n      create unique index #{schema}.ads_location_idx on ads ( doc, par, adi, vrt, sgi );\n      -- ...................................................................................................\n      create view #{schema}.current_brps as select\n          *,\n          #{prefix}get_deviation( x1 ) as deviation\n        from #{schema}.ads\n        where ( br is not null ) and ( br != 'shy' )\n        order by abs( deviation ) asc;\n      -- ...................................................................................................\n      create view #{schema}.current_brp as select * from #{schema}.current_brps limit 1;\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix\n      schema }  = @cfg\n    #.......................................................................................................\n    guy.props.hide @, 'sql',\n      #.....................................................................................................\n      get_db_object_count:  SQL\"select count(*) as count from #{schema}.sqlite_schema;\"\n      #.....................................................................................................\n      upsert_fontnick: @db.create_insert {\n        schema,\n        into:   'fontnicks',\n        fields: [ 'fontnick', 'fspath', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_outline: @db.create_insert {\n        schema,\n        into:       'outlines',\n        fields:     [ 'fontnick', 'gid', 'chrs', 'x', 'y', 'x1', 'y1', 'pd_blob', ],\n        returning:  '*',\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_ad: @db.create_insert {\n        schema,\n        into:       'ads',\n        # exclude:    [ 'id', 'lnr', 'rnr', ],\n        fields:     [ 'doc', 'par', 'adi', 'vrt', 'sgi', 'gid', 'b',\n                      'x', 'y', 'dx', 'dy', 'chrs', 'sid', 'nobr', 'br', ]\n        returning:  '*', }\n      #.....................................................................................................\n      fspath_from_fontnick: SQL\"select fspath from fontnicks where fontnick = $fontnick;\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix\n      schema } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + 'unzip'\n      deterministic:  true\n      varargs:        false\n      call:           ( pd_bfr ) => @_unzip pd_bfr\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_db_object_count:   -> @db.single_value @sql.get_db_object_count\n  # _truncate_entries:      ( source ) -> @db @sql.truncate_entries, { source, }\n  # _delete_arpabet_trlits: -> @db @sql.delete_arpabet_trlits\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_drb_db: ->\n    @db.open @cfg\n    if @cfg.rebuild or ( @_get_db_object_count() is 0 )\n      @_create_db_structure()\n      @_populate_db()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    @_prepopulate_fontnicks()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepopulate_fontnicks: ->\n    upsert_fontnick = @db.prepare @sql.upsert_fontnick\n    @db =>\n      for fontnick, fspath of @cfg.std_fontnicks\n        @db upsert_fontnick, { fontnick, fspath, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _cache_spellings: ->\n  #   cache = ( @cache.spellings ?= {} )\n  #   count = 0\n  #   for line from guy.fs.walk_lines @cfg.paths.spellings\n  #     continue if line.startsWith '#'\n  #     line = line.trim()\n  #     continue if line.length is 0\n  #     continue unless ( match = line.match /(?<lc>\\S+)\\s+(?<spelling>.*)$/ )?\n  #     #.....................................................................................................\n  #     count++\n  #     if count > @cfg.max_entry_count\n  #       warn '^dbay-cmudict/main@3^', \"shortcutting at #{@cfg.max_entry_count} entries\"\n  #       break\n  #     #.....................................................................................................\n  #     { lc,\n  #       spelling, } = match.groups\n  #     lc            = lc.toLowerCase()\n  #     spelling      = spelling.trimEnd()\n  #     cache[ lc ]   = spelling\n  #   return null\n\n\n"
  ]
}