{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DBAY-RUSTYBUZZ'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\ntypes                     = require './types'\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\nSQL                       = String.raw\nguy                       = require 'guy'\nhome                      = PATH.resolve PATH.join __dirname, '..'\n# data_path                 = PATH.join home, 'data'\n{ Drb_outlines }          = require './outlines-mixin'\nfont_path                 = PATH.resolve PATH.join __dirname, '../fonts'\n\n\n#===========================================================================================================\nclass @Drb extends Drb_outlines()\n\n  #---------------------------------------------------------------------------------------------------------\n  @C: guy.lft.freeze\n    # replacement:  'â–ˆ'\n    last_fontidx:       15\n    defaults:\n      #.....................................................................................................\n      dbr_register_fontnick_cfg:\n        fontnick:         null\n        fspath:           null\n      #.....................................................................................................\n      dbr_load_font_cfg:\n        fontnick:         null\n        fspath:           null\n      #.....................................................................................................\n      dbr_load_font_cfg:\n        fontnick:         null\n        gid:              null\n      #.....................................................................................................\n      constructor_cfg:\n        db:               null\n        prefix:           'drb_'\n        schema:           'drb'\n        create:           false\n        # path:             PATH.join home,      'cmudict.sqlite'\n        compress_svg:     true\n        std_fontnicks:\n          gi:               PATH.join font_path, 'ebgaramond/EBGaramond12-Italic.otf'\n          gr:               PATH.join font_path, 'ebgaramond/EBGaramond12-Regular.otf'\n          amr:              PATH.join font_path, 'amiri/Amiri-Regular.ttf'\n        RBW:              null\n\n  #---------------------------------------------------------------------------------------------------------\n  @cast_constructor_cfg: ( me, cfg = null ) ->\n    clasz           = me.constructor\n    R               = cfg ? me.cfg\n    # #.......................................................................................................\n    # if R.path?\n    #   R.temporary  ?= false\n    #   R.path        = PATH.resolve R.path\n    # else\n    #   R.temporary  ?= true\n    #   filename        = me._get_random_filename()\n    #   R.path        = PATH.resolve PATH.join clasz.C.autolocation, filename\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  @declare_types: ( me ) ->\n    ### called from constructor via `guy.cfg.configure_with_types()` ###\n    me.cfg        = @cast_constructor_cfg me\n    me.types.validate.constructor_cfg me.cfg\n    #.......................................................................................................\n    if me.cfg.RBW?  then  { RBW, }  = guy.obj.pluck_with_fallback me.cfg, null, 'RBW'\n    else                    RBW     = require 'rustybuzz-wasm'\n    guy.props.hide me, 'RBW', RBW\n    #.......................................................................................................\n    { db, }       = guy.obj.pluck_with_fallback me.cfg, null, 'db'\n    me.cfg        = guy.lft.freeze guy.obj.omit_nullish me.cfg\n    guy.props.hide me, 'db',     db\n    guy.props.hide me, 'cache',  {}\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    super()\n    guy.cfg.configure_with_types @, cfg, types\n    @_create_sql_functions()\n    @_compile_sql()\n    @_open_drb_db()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      schema    } = @cfg\n    if @cfg.compress_svg\n      outline_type      = 'blob'\n      decompress_clause = prefix + 'decompress( pd_blob )'\n    else\n      outline_type      = 'text'\n      decompress_clause = 'pd_blob'\n    #.......................................................................................................\n    @db.execute SQL\"\"\"\n      drop table if exists #{schema}.outlines;\n      drop table if exists #{schema}.fontnicks;\n      -- ...................................................................................................\n      vacuum #{schema};\n      -- ...................................................................................................\n      create table #{schema}.fontnicks (\n          fontnick    text    not null,\n          fspath      text    not null,\n        primary key ( fontnick ) );\n      -- ...................................................................................................\n      create table #{schema}.outlines (\n          fontnick  text    not null references fontnicks ( fontnick ),\n          gid       integer not null,\n          cid       integer,\n          glyph     text,\n          /* Unscaled Outline ID (UOID): */\n          -- uoid      text generated always as ( 'uo' || '_' || fontnick || '_' || gid ) virtual,\n          uoid      text generated always as ( 'uo' || gid || fontnick ) virtual,\n          /* bounding box */\n          x         float   not null,\n          y         float   not null,\n          x1        float   not null,\n          y1        float   not null,\n          /* PathData (PD): */\n          pd        text generated always as ( #{decompress_clause} ) virtual,\n          pd_blob   #{outline_type} not null,\n          primary key ( fontnick, gid ) );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    { prefix\n      schema }  = @cfg\n    #.......................................................................................................\n    guy.props.hide @, 'sql',\n      #.....................................................................................................\n      get_db_object_count:  SQL\"select count(*) as count from #{schema}.sqlite_schema;\"\n      #.....................................................................................................\n      upsert_fontnick: @db.create_insert {\n        schema, into: 'fontnicks', fields: [ 'fontnick', 'fspath', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      insert_outline: @db.create_insert {\n        schema, into: 'outlines', fields: [ 'fontnick', 'gid', 'cid', 'glyph', 'x', 'y', 'x1', 'y1', 'pd_blob', ],\n        on_conflict: { update: true, }, }\n      #.....................................................................................................\n      fspath_from_fontnick: SQL\"select fspath from fontnicks where fontnick = $fontnick;\"\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    { prefix\n      schema } = @cfg\n    #-------------------------------------------------------------------------------------------------------\n    @db.create_function\n      name:           prefix + 'decompress'\n      deterministic:  true\n      varargs:        false\n      call:           ( pd_bfr ) => @_decompress_svg_pathdata( pd_bfr )\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _get_db_object_count:   -> @db.single_value @sql.get_db_object_count\n  # _truncate_entries:      ( source ) -> @db @sql.truncate_entries, { source, }\n  # _delete_arpabet_trlits: -> @db @sql.delete_arpabet_trlits\n\n  #---------------------------------------------------------------------------------------------------------\n  _open_drb_db: ->\n    @db.open @cfg\n    if @cfg.create or ( @_get_db_object_count() is 0 )\n      @_create_db_structure()\n      @_populate_db()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _populate_db: ->\n    @_prepopulate_fontnicks()\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _prepopulate_fontnicks: ->\n    upsert_fontnick = @db.prepare @sql.upsert_fontnick\n    @db =>\n      for fontnick, fspath of @cfg.std_fontnicks\n        @db upsert_fontnick, { fontnick, fspath, }\n    return null\n\n  # #---------------------------------------------------------------------------------------------------------\n  # _cache_spellings: ->\n  #   cache = ( @cache.spellings ?= {} )\n  #   count = 0\n  #   for line from guy.fs.walk_lines @cfg.paths.spellings\n  #     continue if line.startsWith '#'\n  #     line = line.trim()\n  #     continue if line.length is 0\n  #     continue unless ( match = line.match /(?<lc>\\S+)\\s+(?<spelling>.*)$/ )?\n  #     #.....................................................................................................\n  #     count++\n  #     if count > @cfg.max_entry_count\n  #       warn '^dbay-cmudict/main@3^', \"shortcutting at #{@cfg.max_entry_count} entries\"\n  #       break\n  #     #.....................................................................................................\n  #     { lc,\n  #       spelling, } = match.groups\n  #     lc            = lc.toLowerCase()\n  #     spelling      = spelling.trimEnd()\n  #     cache[ lc ]   = spelling\n  #   return null\n\n\n"
  ]
}