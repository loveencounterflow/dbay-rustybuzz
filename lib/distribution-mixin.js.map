{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _$distribution_initialize: ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @db.create_function name: prefix + 'get_deviation', call: ( dx0, size_u, width_u, x1 ) =>\n      ### Essentiall distance of any point in the text from the end of the current line *relative to\n      type size and scaled such that 1em = 1000u. Most favorable break points are the ones closest to\n      zero. ###\n      R   = Math.round ( x1 - dx0 - width_u ) / size_u * 1000\n      R  *= 2 if R > 0 ### penalty for lines that are too long ###\n      return R\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) -> @_distribute_with_db cfg\n  # distribute: ( cfg ) -> @_distribute_v1 cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  get_current_brp: ( cfg ) ->\n    defaults  = { limit: 1, }\n    cfg       = { defaults..., cfg..., }\n    { dx0\n      size_u\n      width_u\n      x1\n      limit   } = cfg\n    { prefix\n      schema  } = @cfg\n    R = @db.all_rows SQL\"\"\"\n      select\n          *,\n          #{prefix}get_deviation( $dx0, $size_u, $width_u, x1 ) as deviation\n        from #{schema}.ads\n        where ( br is not null ) and ( br != 'shy' )\n        order by abs( deviation ) asc\n        limit $limit;\"\"\", { schema, dx0, size_u, width_u, limit, }\n    return if limit is 1 then R[ 0 ] else R\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_with_db: ( cfg ) ->\n    # { Tbl, }    = require '../../icql-dba-tabulate'\n    # dtab        = new Tbl { db: @db, }\n    #.......................................................................................................\n    { ads     } = cfg\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    mm_p_u    = cfg.mm_p_u\n    width_mm  = cfg.width_mm\n    width_u   = cfg.width_mm / cfg.mm_p_u # line width in glyf design unites (1000 per em)\n    size_mm   = cfg.size_mm               # nominal type size (1em)\n    size_u    = cfg.size_mm  / cfg.mm_p_u\n    adi0      = 0                         # index of AD that represents current line start\n    dx0       = 0                         # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    urge '^4875^', 'ads'; console.table @db.all_rows SQL\"select * from #{schema}.ads order by doc, par, alt, adi, sgi;\"\n    # urge '^4875^', 'current_brps'; console.table @db.all_rows SQL\"select * from #{schema}.current_brps;\"\n    #.......................................................................................................\n    # select last AD: SQL\"select * from ads where alt = 1 and adi = ( select max( adi ) from ads where alt = 1 );\"\n    brp_2         = @db.single_row SQL\"select * from #{schema}.ads where br = 'start' limit 1;\"\n    brp_1         = null\n    lnr           = 0\n    # lines         = []\n    # R             = { lines, }\n    R             = null ### NOTE result via DB for the time being ###\n    count         = 0\n    loop\n      count++\n      if count > 2\n        warn \"infinite loop\"\n        break\n      break if brp_2.br is 'end'\n      lnr++\n      brp_1   = brp_2\n      urge '^5850^', \"current BRPs\"; console.table @get_current_brp { dx0, size_u, width_u, limit: 5, }\n      brp_2   = @get_current_brp { dx0, size_u, width_u, }\n      { doc\n        par } = brp_2\n      info '^5850^', brp_1\n      info '^5850^', brp_2\n      if brp_2.alt is 1 ### non-shy BRP ###\n        throw new Error \"not yet implemented\"\n      else\n        # brp_2.adi\n        # brp_2.sgi\n        ### TAINT use join? ###\n        first_replaced_ad = @db.first_row SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( sgi = $osgi )\n              and ( alt = 1 )\n            order by doc, par, adi;\"\"\", { doc, par, osgi: brp_2.osgi, }\n        urge '^5851^', \"first_replaced_ad\"; console.table [ first_replaced_ad, ]\n        line_ads_alt_1 = @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi >= $brp_1_adi )\n              and ( adi < $first_replaced_adi )\n              and ( alt = 1 )\n            order by doc, par, adi;\"\"\", {\n              doc, par, brp_1_adi: brp_1.adi, first_replaced_adi: first_replaced_ad.adi, }\n        urge '^5851^', \"line_ads_alt_1\"; console.table line_ads_alt_1\n        line_ads_brp_2 = @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( alt = $brp_2_alt )\n            order by doc, par, adi;\"\"\", {\n              doc, par, brp_2_alt: brp_2.alt, }\n        urge '^5851^', \"line_ads_brp_2\"; console.table line_ads_brp_2\n        ### at his point we know that the material to be typeset on the current line\n        starts with BRP 1 and extends to the SG of BRP 2 using the ALT of that break point;\n        it excludes the SG of BRP 2 with ALT = 1 (that is the one with a SHY). ###\n        debug '^33876^', @db.all_rows @sql.insert_line, { doc, par, lnr, x0: brp_1.x, x1: brp_2.x1, }\n        @db =>\n          for ad in line_ads_alt_1\n            x = ad.x - dx0\n            y = ad.y\n            @db @sql.insert_line_ad, { doc, par, lnr, ads_id: ad.id, x, y, }\n          for ad in line_ads_brp_2\n            x = ad.x - dx0\n            y = ad.y\n            @db @sql.insert_line_ad, { doc, par, lnr, ads_id: ad.id, x, y, }\n          return null\n        debug '^33876^'; console.table @db.all_rows SQL\"select * from #{schema}.line_ads order by 1, 2, 3;\"\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_from_adis: ( cfg ) ->\n    { schema\n      doc\n      par\n      adi_1\n      adi_2\n      alt   } = cfg\n    ads       = @db.all_rows SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and doc = $doc\n          and par = $par\n          and adi between $adi_1 and $adi_2\n          and alt = $alt\n        order by doc, par, adi, sgi, alt;\"\"\", { doc, par, adi_1, adi_2, alt, }\n    ad_2  = ads[ ads.length - 1 ]\n    R     = ( ad.chrs ? '' for ad in ads ).join ''\n    R    += '-' if ad_2.br is 'shy'\n    return R\n\n\n\n"
  ]
}