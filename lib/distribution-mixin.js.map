{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @_v ?= {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _$distribution_initialize: ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @db.create_function name: prefix + 'get_deviation', deterministic: false, call: ( x1 ) =>\n      ### Essentiall distance of any point in the text from the end of the current line *relative to\n      type size and scaled such that 1em = 1000u. Most favorable break points are the ones closest to\n      zero. ###\n      R   = Math.round ( x1 - @_v.dx0 - @_v.width_u ) / @_v.size_u * 1000\n      R  *= 2 if R > 0 ### penalty for lines that are too long ###\n      return R\n    #.......................................................................................................\n    @db.create_function name: prefix + 'vnr_pick', deterministic: true, call: ( vnr, nr ) =>\n      return ( jp vnr )[ nr - 1 ]\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) -> @_distribute_with_db cfg\n  # distribute: ( cfg ) -> @_distribute_v1 cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  get_current_brp: ( cfg ) ->\n    { schema, dx0, brp_1, } = cfg\n    @_v.dx0 = brp_1.x1 ### NOTE this value must be set before using the below select ###\n    return @db.single_row SQL\"select * from #{schema}.current_brp;\" ### TAINT use API (?) ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_with_db: ( cfg ) ->\n    # { Tbl, }    = require '../../icql-dba-tabulate'\n    # dtab        = new Tbl { db: @db, }\n    #.......................................................................................................\n    { ads     } = cfg\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @_v.mm_p_u    = cfg.mm_p_u\n    @_v.width_mm  = cfg.width_mm\n    @_v.width_u   = cfg.width_mm / cfg.mm_p_u # line width in glyf design unites (1000 per em)\n    @_v.size_mm   = cfg.size_mm               # nominal type size (1em)\n    @_v.size_u    = cfg.size_mm  / cfg.mm_p_u\n    @_v.adi0      = 0                         # index of AD that represents current line start\n    @_v.dx0       = 0                         # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    urge '^4875^', 'ads';          console.table @db.all_rows SQL\"select id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr from #{schema}.ads order by vnr_blob;\"\n    urge '^4875^', 'current_brps'; console.table @db.all_rows SQL\"select id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr, deviation from #{schema}.current_brps;\"\n    # console.table @db.all_rows SQL\"select * from #{schema}.brps order by vnr_blob;\"\n    #.......................................................................................................\n    brp_2         = @db.single_row SQL\"select * from #{schema}.current_brps where br = 'start' limit 1;\"\n    delete brp_2.vnr; delete brp_2.vnr_blob; console.table [ brp_2, ]\n    brp_1         = null\n    lines         = []\n    lnr           = 0\n    R             = { lines, }\n    count         = -1\n    loop\n      count++\n      if count > 100\n        warn \"infinite loop\"\n        process.exit 119\n      break if brp_2.br is 'end'\n      lnr++\n      brp_1   = brp_2\n      brp_2   = @get_current_brp { schema, dx0: @_v.dx0, brp_1, }\n      { doc\n        par } = brp_2\n      #.....................................................................................................\n      urge '^5850^', \"current BRPs\"; console.table @db.all_rows SQL\"\"\"\n        select\n            id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr, deviation\n          from #{schema}.current_brps limit 3;\"\"\"\n      debug '^347446^', {\n              dx0: @_v.dx0, lnr,\n              doc, par, brp_1_adi: brp_1.adi, brp_2_sgi: brp_2.sgi, brp_2_vrt: brp_2.vrt, }\n      @db SQL\"\"\"\n        update #{schema}.ads set\n            x   = x - $dx0,\n            lnr = $lnr\n          where id in ( select id\n            from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( sgi = $brp_2_sgi )\n              and ( vrt = $brp_2_vrt )\n          union all select id\n            from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi > $brp_1_adi )\n              and ( sgi < $brp_2_sgi )\n              and ( vrt = 1 ) );\"\"\", {\n              dx0: @_v.dx0, lnr,\n              doc, par, brp_1_adi: brp_1.adi, brp_2_sgi: brp_2.sgi, brp_2_vrt: brp_2.vrt, }\n      #.....................................................................................................\n      urge '^5850^', \"current ADs\"; console.table @db.all_rows SQL\"\"\"\n        select\n            id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr\n          from #{schema}.ads\n          where true\n            and ( doc = $doc )\n            and ( par = $par )\n            and ( sgi = $brp_2_sgi )\n            and ( vrt = $brp_2_vrt )\n        union all\n        select\n            id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr\n          from #{schema}.ads\n          where true\n            and ( doc = $doc )\n            and ( par = $par )\n            and ( adi > $brp_1_adi )\n            and ( sgi < $brp_2_sgi )\n            and ( vrt = 1 )\n          order by doc, par, adi, sgi, vrt;\"\"\",\n            { doc, par, brp_1_adi: brp_1.adi, brp_2_sgi: brp_2.sgi, brp_2_vrt: brp_2.vrt, }\n      #.....................................................................................................\n      # info '^4476^', rpr @_text_from_adis { schema, doc, par, adi_1, adi_2, vrt: 1, }\n      #.....................................................................................................\n      # lines.push { doc, par, adi_1, adi_2, vrt_1, vrt_2, vnr_1, vnr_2, dx0: @_v.dx0, }\n    # urge '^4875^', 'ads'; echo dtab._tabulate @db SQL\"select id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr from #{schema}.ads order by vnr_blob;\"\n    urge '^4875^', 'ads';          console.table @db.all_rows SQL\"select id, doc, par, adi, sgi, vrt, gid, b, x, y, dx, dy, x1, chrs, sid, nobr, br, lnr from #{schema}.ads order by vnr_blob;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_from_adis: ( cfg ) ->\n    { schema\n      doc\n      par\n      adi_1\n      adi_2\n      vrt   } = cfg\n    ads       = @db.all_rows SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and doc = $doc\n          and par = $par\n          and adi between $adi_1 and $adi_2\n          and vrt = $vrt\n        order by vnr_blob;\"\"\", { doc, par, adi_1, adi_2, vrt, }\n    ad_2  = ads[ ads.length - 1 ]\n    R     = ( ad.chrs for ad in ads ).join ''\n    R    += '-' if ad_2.br is 'shy'\n    return R\n\n\n\n"
  ]
}