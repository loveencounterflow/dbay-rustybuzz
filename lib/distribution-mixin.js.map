{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,GAAA,GAA4B,MAAM,CAAC;;EACnC,EAAA,GAA4B,IAAI,CAAC;;EACjC,EAAA,GAA4B,IAAI,CAAC,MAlBjC;;;EAsBA,IAAC,CAAA,gBAAD,GAAoB,CAAE,QAAQ,MAAV,CAAA,GAAA;WAAsB,MAAA,QAAc,MAAd,CAAA;;;;;;;MAQxC,yBAA2B,CAAA,CAAA;AAC7B,YAAA,MAAA,EAAA;QAAI,CAAA,CAAE,MAAF,EACE,MADF,CAAA,GACc,IAAC,CAAA,GADf,EAAJ;;QAGI,IAAC,CAAA,EAAE,CAAC,eAAJ,CAAoB;UAAA,IAAA,EAAM,MAAA,GAAS,eAAf;UAAgC,IAAA,EAAM,CAAE,GAAF,EAAO,MAAP,EAAe,OAAf,EAAwB,EAAxB,CAAA,GAAA,EAAA;;;;AAC9D,gBAAA;YAGM,CAAA,GAAM,IAAI,CAAC,KAAL,CAAW,CAAE,EAAA,GAAK,GAAL,GAAW,OAAb,CAAA,GAAyB,MAAzB,GAAkC,IAA7C;YACN,IAAW,CAAA,GAAI,CAAE,yCAAjB;cAAA,CAAA,IAAM,EAAN;;AACA,mBAAO;UANiD;QAAtC,CAApB,EAHJ;;AAWI,eAAO;MAZkB,CAN7B;;;MAqBE,UAAY,CAAE,GAAF,CAAA;eAAW,IAAC,CAAA,mBAAD,CAAqB,GAArB;MAAX,CArBd;;;;;MAyBE,eAAiB,CAAE,GAAF,CAAA;AACnB,YAAA,CAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA;QAAI,QAAA,GAAY;UAAE,KAAA,EAAO;QAAT;QACZ,GAAA,GAAY,CAAE,GAAA,QAAF,EAAe,GAAA,GAAf;QACZ,CAAA,CAAE,GAAF,EACE,MADF,EAEE,OAFF,EAGE,EAHF,EAIE,KAJF,CAAA,GAIc,GAJd;QAKA,CAAA,CAAE,MAAF,EACE,MADF,CAAA,GACc,IAAC,CAAA,GADf;QAEA,CAAA,GAAI,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA;;IAAA,CAAA,CAGZ,MAHY,CAAA;OAAA,CAAA,CAIT,MAJS,CAAA;;;eAAA,CAAhB,EAOkB,CAAE,MAAF,EAAU,GAAV,EAAe,MAAf,EAAuB,OAAvB,EAAgC,KAAhC,CAPlB;QAQG,IAAG,KAAA,KAAS,CAAZ;iBAAmB,CAAC,CAAE,CAAF,EAApB;SAAA,MAAA;iBAA+B,EAA/B;;MAlBQ,CAzBnB;;;MA8CE,mBAAqB,CAAE,GAAF,CAAA;AACvB,YAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,YAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA;QAAI,CAAA,CAAE,MAAF,EACE,MADF,CAAA,GACc,IAAC,CAAA,GADf,EAAJ;;QAGI,CAAA,CAAE,GAAF,EACE,GADF,EAEE,MAFF,EAGE,QAHF,EAIE,OAJF,CAAA,GAIc,GAJd,EAHJ;QAQI,OAAA,GAAc,QAAA,GAAW,OAR7B;QASI,MAAA,GAAc,OAAA,GAAW;QACzB,IAAA,GAAc,EAVlB;QAWI,GAAA,GAAc,EAXlB;;QAaI,IAAA,CAAK,QAAL,EAAe,KAAf;QAAsB,OAAO,CAAC,KAAR,CAAc,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA,cAAA,CAAA,CAAiB,MAAjB,CAAA,0CAAA,CAAhB,CAAd,EAb1B;;;;;;;QAoBI,KAAA,GAAgB,IAAC,CAAA,EAAE,CAAC,UAAJ,CAAe,GAAG,CAAA;;OAAA,CAAA,CAGvB,MAHuB,CAAA;;;;;;UAAA,CAAlB,EASC,CAAE,GAAF,EAAO,GAAP,CATD;QAUhB,KAAA,GAAgB;QAChB,GAAA,GAAgB,EA/BpB;;;QAkCI,CAAA,GAAgB,IAAK;QACrB,KAAA,GAAgB;AAChB,eAAA,IAAA;UACE,KAAA;UACA,IAAG,KAAA,GAAQ,CAAX;YACE,IAAA,CAAK,eAAL;AACA,kBAFF;WADN;;UAKM,GAAA;UACA,IAAA,CAAK,UAAL,EAAiB,2DAAjB,EAA8E,GAA9E;UACA,KAAA,GAAU;UACV,IAAA,CAAK,UAAL,EAAiB,cAAjB;UAAiC,OAAO,CAAC,KAAR,CAAc,IAAC,CAAA,eAAD,CAAiB;YAAE,GAAF;YAAO,MAAP;YAAe,OAAf;YAAwB,KAAA,EAAO;UAA/B,CAAjB,CAAd;UACjC,KAAA,GAAU,IAAC,CAAA,eAAD,CAAiB,CAAE,GAAF,EAAO,MAAP,EAAe,OAAf,CAAjB;UACV,IAAO,aAAP;YACE,IAAA,CAAK,UAAL,EAAiB,4BAAjB;AACA,kBAFF;;UAGA,CAAA,CAAE,GAAF,EACE,GADF,CAAA,GACU,KADV;UAEA,IAAA,CAAK,0BAAL;UAAiC,OAAO,CAAC,KAAR,CAAc,CAAE,KAAF,EAAS,KAAT,CAAd,EAfvC;;UAiBM,IAAG,KAAK,CAAC,GAAN,KAAa,CAAE,iBAAlB;YACE,QAAA,GAAW,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA,cAAA,CAAA,CACT,MADS,CAAA;;;;;;;;yBAAA,CAAhB,EASqB;cAC1B,GAD0B;cACrB,GADqB;cAChB,SAAA,EAAW,KAAK,CAAC,GADD;cACM,SAAA,EAAW,KAAK,CAAC;YADvB,CATrB;YAWX,IAAA,CAAK,UAAL,EAAiB,UAAjB,EAA6B,CAAE,GAAF,CAA7B;YAAuC,OAAO,CAAC,KAAR,CAAc,QAAd;YACvC,IAAC,CAAA,EAAD,CAAI,CAAA,CAAA,GAAA;AACZ,kBAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA;cAAU,KAAA,CAAM,UAAN,EAAkB,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,IAAC,CAAA,GAAG,CAAC,WAAlB,EAA+B;gBAAE,GAAF;gBAAO,GAAP;gBAAY,GAAZ;gBAAiB,EAAA,EAAI,KAAK,CAAC,CAA3B;gBAA8B,EAAA,EAAI,KAAK,CAAC;cAAxC,CAA/B,CAAlB;cACA,KAAA,0CAAA;;gBACE,CAAA,GAAI,EAAE,CAAC,CAAH,GAAO;gBACX,CAAA,GAAI,EAAE,CAAC;gBACP,IAAC,CAAA,EAAD,CAAI,IAAC,CAAA,GAAG,CAAC,cAAT,EAAyB;kBAAE,GAAF;kBAAO,GAAP;kBAAY,GAAZ;kBAAiB,MAAA,EAAQ,EAAE,CAAC,EAA5B;kBAAgC,CAAhC;kBAAmC;gBAAnC,CAAzB;cAHF;AAIA,qBAAO;YANL,CAAJ;YAOA,KAAA,GAAQ,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAc,GAAG,CAAA,cAAA,CAAA,CACP,MADO,CAAA;;;;;;UAAA,CAAjB,EAOS;cAAE,GAAF;cAAO,GAAP;cAAY,SAAA,EAAW,KAAK,CAAC;YAA7B,CAPT;YAQR,IAAO,aAAP;cACE,IAAA,CAAK,UAAL,EAAiB,4BAAjB;AACA,oBAFF;;YAGA,IAAA,CAAK,UAAL,EAAiB,OAAjB;YAA0B,OAAO,CAAC,KAAR,CAAc,CAAE,KAAF,CAAd;YAC1B,GAAA,GAAM,KAAK,CAAC,EAhCd;WAAA,MAAA;;;YAoCE,mBAAA,GAAsB,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA,cAAA,CAAA,CACpB,MADoB,CAAA;;;;;;yBAAA,CAAhB,EAOU;cAAE,GAAF;cAAO,GAAP;cAAY,IAAA,EAAM,KAAK,CAAC;YAAxB,CAPV;YAQtB,IAAA,CAAK,UAAL,EAAiB,qBAAjB;YAAwC,OAAO,CAAC,KAAR,CAAc,mBAAd;YACxC,QAAA,GAAW,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA,cAAA,CAAA,CACT,MADS,CAAA;;;;;;;;;cAAA,CAAA,CAUT,MAVS,CAAA;;;;;;;4BAAA,CAAhB,EAiBwB;cAC7B,GAD6B;cAE7B,GAF6B;cAG7B,SAAA,EAAsB,KAAK,CAAC,GAHC;cAI7B,SAAA,EAAsB,KAAK,CAAC,GAJC;cAK7B,kBAAA,EAAsB,mBAAmB,CAAE,CAAF,CAAK,CAAC,GALlB;cAM7B,SAAA,EAAsB,KAAK,CAAC;YANC,CAjBxB;YAwBX,IAAA,CAAK,WAAL,EAAkB,UAAlB,EAA8B,CAAE,GAAF,CAA9B;YAAwC,OAAO,CAAC,KAAR,CAAc,QAAd,EAlChD;;;;YAsCQ,IAAC,CAAA,EAAD,CAAI,CAAA,CAAA,GAAA;AACZ,kBAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA;cAAU,KAAA,CAAM,WAAN,EAAmB,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,IAAC,CAAA,GAAG,CAAC,WAAlB,EAA+B;gBAAE,GAAF;gBAAO,GAAP;gBAAY,GAAZ;gBAAiB,EAAA,EAAI,KAAK,CAAC,CAA3B;gBAA8B,EAAA,EAAI,KAAK,CAAC;cAAxC,CAA/B,CAAnB;cACA,KAAA,0CAAA;;gBACE,CAAA,GAAI,EAAE,CAAC,CAAH,GAAO;gBACX,CAAA,GAAI,EAAE,CAAC;gBACP,IAAC,CAAA,EAAD,CAAI,IAAC,CAAA,GAAG,CAAC,cAAT,EAAyB;kBAAE,GAAF;kBAAO,GAAP;kBAAY,GAAZ;kBAAiB,MAAA,EAAQ,EAAE,CAAC,EAA5B;kBAAgC,CAAhC;kBAAmC;gBAAnC,CAAzB;cAHF;AAIA,qBAAO;YANL,CAAJ,EAtCR;;;YA+CQ,KAAA,CAAM,WAAN,EAAmB,mBAAmB,CAAE,mBAAmB,CAAC,MAApB,GAA6B,CAA/B,CAAtC;YACA,KAAA,CAAM,WAAN,EAAmB,YAAA,GAAe,mBAAmB,CAAE,mBAAmB,CAAC,MAApB,GAA6B,CAA/B,CAAkC,CAAC,GAAxF;YACA,IAAA,CAAK,WAAL,EAAkB,OAAlB;YAA2B,OAAO,CAAC,KAAR,CAAc,CAAE,KAAF,CAAd;YAC3B,IAAA,CAAK,WAAL,EAAkB,YAAlB;YAAgC,OAAO,CAAC,KAAR,CAAc,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA,cAAA,CAAA,CAC5C,MAD4C,CAAA;;;;;;;cAAA,CAAA,CAQ5C,MAR4C,CAAA;;;;;oBAAA,CAAhB,EAanB;cACnB,GADmB;cACd,GADc;cACT,YADS;cACK,SAAA,EAAW,KAAK,CAAC,GADtB;cAC2B,SAAA,EAAW,KAAK,CAAC;YAD5C,CAbmB,CAAd;YAehC,KAAA,GAAQ,IAAC,CAAA,EAAE,CAAC,SAAJ,CAAc,GAAG,CAAA,cAAA,CAAA,CACP,MADO,CAAA;;;;;;;cAAA,CAAA,CAQP,MARO,CAAA;;;;;oBAAA,CAAjB,EAamB;cACnB,GADmB;cACd,GADc;cACT,YADS;cACK,SAAA,EAAW,KAAK,CAAC,GADtB;cAC2B,SAAA,EAAW,KAAK,CAAC;YAD5C,CAbnB;YAeR,IAAO,aAAP;cACE,IAAA,CAAK,WAAL,EAAkB,4BAAlB;AACA,oBAFF;aAhFR;;YAoFQ,GAAA,GAAM,KAAK,CAAC,EAvHd;;QAlBF,CApCJ;;;AAgLI,eAAO;MAjLY,CA9CvB;;;MAkOE,eAAiB,CAAE,GAAF,CAAA;AACnB,YAAA,CAAA,EAAA,EAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,CAAA,CAAE,MAAF,EACE,GADF,EAEE,GAFF,EAGE,KAHF,EAIE,KAJF,EAKE,GALF,CAAA,GAKY,GALZ;QAMA,GAAA,GAAY,IAAC,CAAA,EAAE,CAAC,QAAJ,CAAa,GAAG,CAAA;;OAAA,CAAA,CAGjB,MAHiB,CAAA;;;;;;mCAAA,CAAhB,EAS8B,CAAE,GAAF,EAAO,GAAP,EAAY,KAAZ,EAAmB,KAAnB,EAA0B,GAA1B,CAT9B;QAUZ,IAAA,GAAQ,GAAG,CAAE,GAAG,CAAC,MAAJ,GAAa,CAAf;QACX,CAAA,GAAQ;;AAAE;UAAA,KAAA,qCAAA;;yDAAU;UAAV,CAAA;;YAAF,CAA8B,CAAC,IAA/B,CAAoC,EAApC;QACR,IAAe,IAAI,CAAC,EAAL,KAAW,KAA1B;UAAA,CAAA,IAAQ,IAAR;;AACA,eAAO;MApBQ;;IApOuB;EAAtB;AAtBpB",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _$distribution_initialize: ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @db.create_function name: prefix + 'get_deviation', call: ( dx0, size_u, width_u, x1 ) =>\n      ### Essentiall distance of any point in the text from the end of the current line *relative to\n      type size and scaled such that 1em = 1000u. Most favorable break points are the ones closest to\n      zero. ###\n      R   = Math.round ( x1 - dx0 - width_u ) / size_u * 1000\n      R  *= 2 if R > 0 ### penalty for lines that are too long ###\n      return R\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) -> @_distribute_with_db cfg\n  # distribute: ( cfg ) -> @_distribute_v1 cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  get_current_brp: ( cfg ) ->\n    defaults  = { limit: 1, }\n    cfg       = { defaults..., cfg..., }\n    { dx0\n      size_u\n      width_u\n      x1\n      limit   } = cfg\n    { prefix\n      schema  } = @cfg\n    R = @db.all_rows SQL\"\"\"\n      select\n          *,\n          #{prefix}get_deviation( $dx0, $size_u, $width_u, x1 ) as deviation\n        from #{schema}.ads\n        where ( br is not null ) and ( br != 'shy' )\n        order by abs( deviation ) asc\n        limit $limit;\"\"\", { schema, dx0, size_u, width_u, limit, }\n    return if limit is 1 then R[ 0 ] else R\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_with_db: ( cfg ) ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    { doc\n      par\n      mm_p_u\n      width_mm\n      size_mm } = cfg                       # nominal type size (1em)\n    width_u     = width_mm / mm_p_u         # line width in glyf design units (1000 per em)\n    size_u      = size_mm  / mm_p_u\n    adi0        = 0                         # index of AD that represents current line start\n    dx0         = 0                         # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    urge '^4875^', 'ads'; console.table @db.all_rows SQL\"select * from #{schema}.ads order by doc, par, alt, b1, adi, sgi;\"\n    # urge '^4875^', 'ads'; console.table @db.all_rows SQL\"select b1, b2, sgi, osgi, chrs, x from #{schema}.ads where sgi = 12 or osgi = 12 order by doc, par, alt, b1, adi, sgi;\"\n    # process.exit 119\n    # urge '^4875^', 'current_brps'; console.table @db.all_rows SQL\"select * from #{schema}.current_brps;\"\n    #.......................................................................................................\n    # select last AD: SQL\"select * from ads where alt = 1 and adi = ( select max( adi ) from ads where alt = 1 );\"\n    # brp_2         = @db.single_row SQL\"select * from #{schema}.ads where br = 'start' limit 1;\"\n    brp_2         = @db.single_row SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and ( doc = $doc )\n          and ( par = $par )\n          -- and ( br = 'start' )\n        order by adi asc\n        limit 1;\"\"\", { doc, par, }\n    brp_1         = null\n    lnr           = 0\n    # lines         = []\n    # R             = { lines, }\n    R             = null ### NOTE result via DB for the time being ###\n    count         = 0\n    loop\n      count++\n      if count > 3\n        warn \"infinite loop\"\n        break\n      # break if brp_2.br is 'end'\n      lnr++\n      info '^5850-1^', '███████████████████████████████████████████████████ line:', lnr\n      brp_1   = brp_2\n      urge '^5850-2^', \"current BRPs\"; console.table @get_current_brp { dx0, size_u, width_u, limit: 5, }\n      brp_2   = @get_current_brp { dx0, size_u, width_u, }\n      unless brp_2?\n        warn '^5850-3^', \"did not find `end` element\"\n        break\n      { doc\n        par } = brp_2\n      urge '^5850-4^ brp_1 and brp_2'; console.table [ brp_1, brp_2, ]\n      #.....................................................................................................\n      if brp_2.alt is 1 ### non-shy BRP ###\n        line_ads = @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi >= $brp_1_adi )\n              and ( adi <= $brp_2_adi )\n              and ( alt = 1 )\n              -- and ( br != 'shy' )\n            order by doc, par, adi;\"\"\", {\n              doc, par, brp_1_adi: brp_1.adi, brp_2_adi: brp_2.adi, }\n        urge '^5850-5^', \"line_ads\", { lnr, }; console.table line_ads\n        @db =>\n          debug '^5850-6^', @db.all_rows @sql.insert_line, { doc, par, lnr, x0: brp_1.x, x1: brp_2.x1, }\n          for ad in line_ads\n            x = ad.x - dx0\n            y = ad.y\n            @db @sql.insert_line_ad, { doc, par, lnr, ads_id: ad.id, x, y, }\n          return null\n        brp_2 = @db.first_row SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi = $brp_2_adi + 1 )\n              and ( alt = 1 )\n            limit 1;\"\"\", { doc, par, brp_2_adi: brp_2.adi, }\n        unless brp_2?\n          warn '^5850-7^', \"did not find `end` element\"\n          break\n        urge '^5850-8^', \"brp_2\"; console.table [ brp_2, ]\n        dx0 = brp_2.x\n      #.....................................................................................................\n      else\n        ### TAINT how to handle case when shapegroup has elements on right hand side of HHY? ###\n        original_shapegroup = @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( sgi = $osgi )\n              and ( alt = 1 )\n            order by doc, par, adi;\"\"\", { doc, par, osgi: brp_2.osgi, }\n        urge '^5850-9^', \"original_shapegroup\"; console.table original_shapegroup\n        line_ads = @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi >= $brp_1_adi )\n              and ( adi < $first_replaced_adi )\n              and ( alt = 1 )\n              -- and ( br != 'shy' )\n          union all\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( alt = $brp_2_alt )\n              and ( adi <= $brp_2_adi )\n              -- and ( br != 'shy' )\n            order by doc, par, x, adi;\"\"\", {\n              doc,\n              par,\n              brp_2_alt:            brp_2.alt,\n              brp_1_adi:            brp_1.adi,\n              first_replaced_adi:   original_shapegroup[ 0 ].adi,\n              brp_2_adi:            brp_2.adi, }\n        urge '^5850-10^', \"line_ads\", { lnr, }; console.table line_ads\n        ### at his point we know that the material to be typeset on the current line\n        starts with BRP 1 and extends to the SG of BRP 2 using the ALT of that break point;\n        it excludes the SG of BRP 2 with ALT = 1 (that is the one with a SHY). ###\n        @db =>\n          debug '^5850-11^', @db.all_rows @sql.insert_line, { doc, par, lnr, x0: brp_1.x, x1: brp_2.x1, }\n          for ad in line_ads\n            x = ad.x - dx0\n            y = ad.y\n            @db @sql.insert_line_ad, { doc, par, lnr, ads_id: ad.id, x, y, }\n          return null\n        # debug '^5850-12^ line_ads'; console.table @db.all_rows SQL\"select * from #{schema}.line_ads order by 1, 2, 3;\"\n        ### TAINT does not correctly handle case when shapegroup has elements on right hand side of HHY ###\n        debug '^5850-13^', original_shapegroup[ original_shapegroup.length - 1 ]\n        debug '^5850-14^', last_osg_adi = original_shapegroup[ original_shapegroup.length - 1 ].adi\n        urge '^5850-15^', \"brp_2\"; console.table [ brp_2, ]\n        urge '^5850-16^', \"next brp_2\"; console.table @db.all_rows SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi = $brp_2_adi + 1 )\n              and ( alt = $brp_2_alt )\n            union all\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi = $last_osg_adi + 1 )\n              and ( alt = 1 );\"\"\", {\n                doc, par, last_osg_adi, brp_2_adi: brp_2.adi, brp_2_alt: brp_2.alt, }\n        brp_2 = @db.first_row SQL\"\"\"\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi = $brp_2_adi + 1 )\n              and ( alt = $brp_2_alt )\n            union all\n          select * from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi = $last_osg_adi + 1 )\n              and ( alt = 1 );\"\"\", {\n                doc, par, last_osg_adi, brp_2_adi: brp_2.adi, brp_2_alt: brp_2.alt, }\n        unless brp_2?\n          warn '^5850-17^', \"did not find `end` element\"\n          break\n        # urge '^5850-18^', \"brp_2\"; console.table [ brp_2, ]\n        dx0 = brp_2.x\n    #.......................................................................................................\n    # urge '^5850-19^', \"line_ads\", { lnr, }; console.table @db.all_rows SQL\"select * from #{schema}.line_ads order by 1, 2, 3, 4;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_from_adis: ( cfg ) ->\n    { schema\n      doc\n      par\n      adi_1\n      adi_2\n      alt   } = cfg\n    ads       = @db.all_rows SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and doc = $doc\n          and par = $par\n          and adi between $adi_1 and $adi_2\n          and alt = $alt\n        order by doc, par, adi, sgi, alt;\"\"\", { doc, par, adi_1, adi_2, alt, }\n    ad_2  = ads[ ads.length - 1 ]\n    R     = ( ad.chrs ? '' for ad in ads ).join ''\n    R    += '-' if ad_2.br is 'shy'\n    return R\n\n\n\n"
  ]
}