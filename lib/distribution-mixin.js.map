{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @_v ?= {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _$distribution_initialize: ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @db.create_function name: prefix + 'get_deviation', deterministic: false, call: ( x1 ) =>\n      ### Essentiall distance of any point in the text from the end of the current line *relative to\n      type size and scaled such that 1em = 1000u. Most favorable break points are the ones closest to\n      zero. ###\n      R   = Math.round ( x1 - @_v.dx0 - @_v.width_u ) / @_v.size_u * 1000\n      R  *= 2 if R > 0 ### penalty for lines that are too long ###\n      return R\n    #.......................................................................................................\n    @db.create_function name: prefix + 'vnr_pick', deterministic: true, call: ( vnr, nr ) =>\n      return ( jp vnr )[ nr - 1 ]\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) -> @_distribute_with_db cfg\n  # distribute: ( cfg ) -> @_distribute_v1 cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_with_db: ( cfg ) ->\n    { ads     } = cfg\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @_v.mm_p_u    = cfg.mm_p_u\n    @_v.width_mm  = cfg.width_mm\n    @_v.width_u   = cfg.width_mm / cfg.mm_p_u # line width in glyf design unites (1000 per em)\n    @_v.size_mm   = cfg.size_mm               # nominal type size (1em)\n    @_v.size_u    = cfg.size_mm  / cfg.mm_p_u\n    @_v.adi0      = 0                         # index of AD that represents current line start\n    @_v.dx0       = 0                         # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    console.table @db.all_rows SQL\"select doc, par, adi, vrt, vnr, gid, b, x, y, dx, dy, x1, chrs, sid, sgi, nobr, br from #{schema}.ads order by vnr_blob;\"\n    console.table @db.all_rows SQL\"select doc, par, adi, vrt, vnr, gid, b, x, y, dx, dy, x1, chrs, sid, sgi, nobr, br, deviation from #{schema}.brps order by vnr_blob;\"\n    console.table @db.all_rows SQL\"select doc, par, adi, vrt, vnr, gid, b, x, y, dx, dy, x1, chrs, sid, sgi, nobr, br, deviation from #{schema}.brps order by abs( deviation ) limit 5;\"\n    # console.table @db.all_rows SQL\"select * from #{schema}.brps order by vnr_blob;\"\n    #.......................................................................................................\n    @_v.dx0       = 0\n    brp_2         = @db.single_row SQL\"select doc, par, adi, vrt, vnr, gid, b, x, y, dx, dy, x1, chrs, sid, sgi, nobr, br, deviation from #{schema}.brps order by vnr_blob limit 1;\"\n    console.table [ brp_2, ]\n    brp_2.vnr     = jp brp_2.vnr\n    brp_1         = null\n    lines         = []\n    R             = { lines, }\n    count         = -1\n    loop\n      count++\n      if count > 100\n        warn \"infinite loop\"\n        process.exit 119\n      break if brp_2.br is 'end'\n      brp_1                   = brp_2\n      brp_2                   = @db.single_row SQL\"select doc, par, adi, vrt, vnr, gid, b, x, y, dx, dy, x1, chrs, sid, sgi, nobr, br, deviation from #{schema}.brps order by abs( deviation ) limit 1;\"\n      brp_2.vnr               = jp brp_2.vnr\n      vnr_1                   = brp_1.vnr # or use `select from ads`?\n      ### NOTE move from breakpoint to material ###\n      ### TAINT doesn't honor multiple consecutive breakpoints ###\n      vnr_1[ 2 ]++\n      vnr_2                       = brp_2.vnr\n      [ doc, par, adi_1, vrt_1, ] = vnr_1\n      [ _,   _,   adi_2, vrt_2, ] = vnr_2\n      #.....................................................................................................\n      ### TAINT use `stamped` boolean column to select variant ###\n      info '^4476^', rpr @_text_from_adis { schema, doc, par, adi_1, adi_2, vrt: 1, }\n      #.....................................................................................................\n      lines.push { doc, par, adi_1, adi_2, vrt_1, vrt_2, vnr_1, vnr_2, dx0: @_v.dx0, }\n      @_v.dx0 = brp_2.x1\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_from_adis: ( cfg ) ->\n    { schema\n      doc\n      par\n      adi_1\n      adi_2\n      vrt   } = cfg\n    ads       = @db.all_rows SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and doc = $doc\n          and par = $par\n          and adi between $adi_1 and $adi_2\n          and vrt = $vrt\n        order by vnr_blob;\"\"\", { doc, par, adi_1, adi_2, vrt, }\n    ad_2  = ads[ ads.length - 1 ]\n    R     = ( ad.chrs for ad in ads ).join ''\n    R    += '-' if ad_2.br is 'shy'\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_v1: ( cfg ) ->\n    { ads\n      mm_p_u\n      width_mm  } = cfg\n    lines         = []\n    R             = { lines, }\n    width_u       = width_mm / mm_p_u # line width in glyf design unites (1000 per em)\n    brps          = []                # BReak PointS\n    #.......................................................................................................\n    ### Find BReak PointS: ###\n    brps.push { adi: 0, br: 'start', x: 0, }\n    for ad, adi in ads\n      continue unless ad.br?\n      brps.push { adi, br: ad.br, x: ad.x, }\n    last_adi  = ads.length - 1\n    last_ad   = ads[ last_adi ]\n    brps.push { adi: last_adi, br: 'end', x: last_ad.x + last_ad.dx, dx: 0, }\n    #.......................................................................................................\n    brpi      = -1                    # index to BRP\n    last_brpi = brps.length - 1\n    brpi1     = 0                     # index to left-hand BRP\n    brpi2     = null                  # index to right-hand BRP\n    adi1      = null                  # index to left-hand AD\n    adi2      = null                  # index to right-hand AD\n    dx0       = 0                     # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    loop\n      brpi++\n      break if brpi > last_brpi\n      brp           = brps[ brpi ]\n      corrected_x   = brp.x - dx0\n      ### TAINT use tolerance to allow line break when line is just a bit too long ###\n      continue unless corrected_x > width_u\n      brpi2         = brpi - 1 ### TAINT may be < 0 when first word too long ###\n      adi1          = ( adi2 ? brps[ brpi1 ].adi - 1 ) + 1\n      adi2          = brps[ brpi2 ].adi\n      lines.push { adi1, adi2, dx0, }\n      brpi1         = brpi\n      dx0           = ads[ adi2 + 1 ].x\n    #.......................................................................................................\n    if adi2 < last_adi\n      dx0           = ads[ adi2 + 1 ].x\n      brpi1         = brpi2 + 1\n      brpi2         = last_brpi\n      adi1          = adi2 + 1\n      adi2          = last_adi\n      lines.push { adi1, adi2, dx0, }\n    #.......................................................................................................\n    lnr = 0\n    rnr = lines.length + 1\n    for line in lines\n      lnr++; line.lnr = lnr\n      rnr--; line.rnr = rnr\n      # continue unless ads[ line.adi2 ].br is 'shy'\n      ### TAINT consider to always use visible hyphen but hide it in CSS ###\n      ### TAINT not the way to do this ###\n      # ads[ line.adi2 ].sid = 'o14eg8i'\n      debug '^94509^', line\n    #.......................................................................................................\n    return R\n\n\n\n\n"
  ]
}