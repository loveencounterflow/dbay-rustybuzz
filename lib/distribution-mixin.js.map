{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    super()\n    @_v ?= {}\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _$distribution_initialize: ->\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @db.create_function name: prefix + 'get_deviation', deterministic: false, call: ( x1 ) =>\n      ### Essentiall distance of any point in the text from the end of the current line *relative to\n      type size and scaled such that 1em = 1000u. Most favorable break points are the ones closest to\n      zero. ###\n      R   = Math.round ( x1 - @_v.dx0 - @_v.width_u ) / @_v.size_u * 1000\n      R  *= 2 if R > 0 ### penalty for lines that are too long ###\n      return R\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) -> @_distribute_with_db cfg\n  # distribute: ( cfg ) -> @_distribute_v1 cfg\n\n  #---------------------------------------------------------------------------------------------------------\n  get_current_brp: ( cfg ) ->\n    { schema, dx0, brp_1, } = cfg\n    @_v.dx0 = brp_1.x1 ### NOTE this value must be set before using the below select ###\n    return @db.single_row SQL\"select * from #{schema}.current_brp;\" ### TAINT use API (?) ###\n\n  #---------------------------------------------------------------------------------------------------------\n  _distribute_with_db: ( cfg ) ->\n    # { Tbl, }    = require '../../icql-dba-tabulate'\n    # dtab        = new Tbl { db: @db, }\n    #.......................................................................................................\n    { ads     } = cfg\n    { schema,\n      prefix  } = @cfg\n    #.......................................................................................................\n    @_v.mm_p_u    = cfg.mm_p_u\n    @_v.width_mm  = cfg.width_mm\n    @_v.width_u   = cfg.width_mm / cfg.mm_p_u # line width in glyf design unites (1000 per em)\n    @_v.size_mm   = cfg.size_mm               # nominal type size (1em)\n    @_v.size_u    = cfg.size_mm  / cfg.mm_p_u\n    @_v.adi0      = 0                         # index of AD that represents current line start\n    @_v.dx0       = 0                         # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    urge '^4875^', 'ads'; console.table @db.all_rows SQL\"select * from #{schema}.ads order by doc, par, adi, sgi, alt;\"\n    # urge '^4875^', 'current_brps'; console.table @db.all_rows SQL\"select * from #{schema}.current_brps;\"\n    #.......................................................................................................\n    brp_2         = @db.single_row SQL\"select * from #{schema}.current_brps where br = 'start' limit 1;\"\n    brp_1         = null\n    lnr           = 0\n    # lines         = []\n    # R             = { lines, }\n    R             = null ### NOTE result via DB for the time being ###\n    count         = -1\n    loop\n      count++\n      if count > 100\n        warn \"infinite loop\"\n        process.exit 119\n      break if brp_2.br is 'end'\n      lnr++\n      brp_1   = brp_2\n      brp_2   = @get_current_brp { schema, dx0: @_v.dx0, brp_1, }\n      { doc\n        par } = brp_2\n      #.....................................................................................................\n      # urge '^5850^', \"current BRPs\"; console.table @db.all_rows SQL\"\"\"\n      #   select\n      #       *\n      #     from #{schema}.current_brps limit 3;\"\"\"\n      # debug '^347446^', {\n      #         dx0: @_v.dx0, lnr,\n      #         doc, par, brp_1_adi: brp_1.adi, brp_2_sgi: brp_2.sgi, brp_2_alt: brp_2.alt, }\n      @db SQL\"\"\"\n        update #{schema}.ads set\n            x   = x - $dx0,\n            lnr = $lnr\n          where id in ( select id\n            from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( alt = $brp_2_alt )\n              and ( sgi = $brp_2_sgi )\n          union all select id\n            from #{schema}.ads\n            where true\n              and ( doc = $doc )\n              and ( par = $par )\n              and ( adi > $brp_1_adi )\n              -- and ( alt = 1 )\n              and ( sgi < $brp_2_sgi ) );\"\"\", {\n              dx0: @_v.dx0, lnr,\n              doc, par, brp_1_adi: brp_1.adi, brp_2_alt: brp_2.alt, brp_2_sgi: brp_2.sgi, }\n    #   #.....................................................................................................\n    #   urge '^5850^', \"current ADs\"; console.table @db.all_rows SQL\"\"\"\n    #     select\n    #         *\n    #       from #{schema}.ads\n    #       where true\n    #         and ( doc = $doc )\n    #         and ( par = $par )\n    #         and ( sgi = $brp_2_sgi )\n    #         and ( alt = $brp_2_alt )\n    #     union all\n    #     select\n    #         *\n    #       from #{schema}.ads\n    #       where true\n    #         and ( doc = $doc )\n    #         and ( par = $par )\n    #         and ( adi > $brp_1_adi )\n    #         and ( sgi < $brp_2_sgi )\n    #         and ( alt = 1 )\n    #       order by doc, par, adi, sgi, alt;\"\"\",\n    #         { doc, par, brp_1_adi: brp_1.adi, brp_2_sgi: brp_2.sgi, brp_2_alt: brp_2.alt, }\n    #   #.....................................................................................................\n    #   # info '^4476^', rpr @_text_from_adis { schema, doc, par, adi_1, adi_2, alt: 1, }\n    #   #.....................................................................................................\n    urge '^4875^', 'ads'; console.table @db.all_rows SQL\"select * from #{schema}.ads order by doc, par, adi, sgi, alt;\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _text_from_adis: ( cfg ) ->\n    { schema\n      doc\n      par\n      adi_1\n      adi_2\n      alt   } = cfg\n    ads       = @db.all_rows SQL\"\"\"\n      select\n          *\n        from #{schema}.ads\n        where true\n          and doc = $doc\n          and par = $par\n          and adi between $adi_1 and $adi_2\n          and alt = $alt\n        order by doc, par, adi, sgi, alt;\"\"\", { doc, par, adi_1, adi_2, alt, }\n    ad_2  = ads[ ads.length - 1 ]\n    R     = ( ad.chrs ? '' for ad in ads ).join ''\n    R    += '-' if ad_2.br is 'shy'\n    return R\n\n\n\n"
  ]
}