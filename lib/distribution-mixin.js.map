{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/distribution-mixin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'DRB/MIXIN/DISTRIBUTION'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\nguy                       = require 'guy'\nE                         = require './errors'\nSQL                       = String.raw\n\n\n#-----------------------------------------------------------------------------------------------------------\n@Drb_distribution = ( clasz = Object ) => class extends clasz\n\n  # #---------------------------------------------------------------------------------------------------------\n  # constructor: ->\n  #   super()\n  #   guy.props.hide @, 'state', {} unless @state?\n  #   @state.prv_fontidx            = -1\n  #   @state.font_idx_by_fontnicks  = {}\n  #   #.........................................................................................................\n  #   return undefined\n\n  #-----------------------------------------------------------------------------------------------------------\n  distribute: ( cfg ) ->\n    { ads\n      mm_p_u\n      width_mm  } = cfg\n    lines         = []\n    R             = { lines, }\n    width_u       = width_mm / mm_p_u # line width in glyf design unites (1000 per em)\n    brps          = []                # BReak PointS\n    #.......................................................................................................\n    ### Find BReak PointS: ###\n    brps.push { adi: 0, br: 'start', x: 0, }\n    for ad, adi in ads\n      continue unless ad.br?\n      brps.push { adi, br: ad.br, x: ad.x, }\n    last_adi  = ads.length - 1\n    brps.push { adi: last_adi, br: 'end', x: ads[ last_adi ].x, }\n    #.......................................................................................................\n    brpi      = -1                    # index to BRP\n    last_brpi = brps.length - 1\n    brpi1     = 0                     # index to left-hand BRP\n    brpi2     = null                  # index to right-hand BRP\n    adi1      = null                  # index to left-hand AD\n    adi2      = null                  # index to right-hand AD\n    dx0       = 0                     # extraneous width (b/c paragraph was set in single long line)\n    #.......................................................................................................\n    loop\n      brpi++\n      break if brpi > last_brpi\n      brp           = brps[ brpi ]\n      corrected_x   = brp.x - dx0\n      ### TAINT use tolerance to allow line break when line is just a bit too long ###\n      continue unless corrected_x > width_u\n      brpi2         = brpi - 1 ### TAINT may be < 0 when first word too long ###\n      adi1          = ( adi2 ? brps[ brpi1  ].adi - 1 ) + 1\n      adi2          = brps[ brpi2 ].adi\n      lines.push { adi1, adi2, dx0, }\n      brpi1         = brpi\n      dx0           = ads[ adi2 + 1 ].x\n    #.......................................................................................................\n    if adi2 < last_adi\n      dx0           = ads[ adi2 + 1 ].x\n      brpi1         = brpi2 + 1\n      brpi2         = last_brpi\n      adi1          = adi2 + 1\n      adi2          = last_adi\n      lines.push { adi1, adi2, dx0, }\n    #.......................................................................................................\n    lnr = 0\n    rnr = lines.length + 1\n    for line in lines\n      lnr++; line.lnr = lnr\n      rnr--; line.rnr = rnr\n      # continue unless ads[ line.adi2 ].br is 'shy'\n      ### TAINT consider to always use visible hyphen but hide it in CSS ###\n      ### TAINT not the way to do this ###\n      # ads[ line.adi2 ].sid = 'o14eg8i'\n      debug '^94509^', line\n    #.......................................................................................................\n    return R\n\n\n\n\n"
  ]
}